{
  "name": "GovernanceToken",
  "address": "0xd91E8EdB413f8F939C52063e12D51921344BabcB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromDelegate",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toDelegate",
          "type": "address"
        }
      ],
      "name": "DelegateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "delegate",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBalance",
          "type": "uint256"
        }
      ],
      "name": "DelegateVotesChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DELEGATION_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "checkpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "fromBlock",
          "type": "uint32"
        },
        {
          "internalType": "uint96",
          "name": "votes",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        }
      ],
      "name": "delegate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "delegatee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "delegateBySig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegates",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getCurrentVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "getPriorVotes",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "numCheckpoints",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rawAmount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f42739a12bc0cd27ec2f5178128b0d78febeff26a4e7cee7545084d5489fc99",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0xd91E8EdB413f8F939C52063e12D51921344BabcB",
    "transactionIndex": 5,
    "gasUsed": "1854274",
    "logsBloom": "0x
    "blockHash": "0x94369426fba3146bb65b6ef7b4e803f9a374ad21615ff2d1d2097ab3bb0a13b2",
    "transactionHash": "0x3f42739a12bc0cd27ec2f5178128b0d78febeff26a4e7cee7545084d5489fc99",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 11292236,
        "transactionHash": "0x3f42739a12bc0cd27ec2f5178128b0d78febeff26a4e7cee7545084d5489fc99",
        "address": "0xd91E8EdB413f8F939C52063e12D51921344BabcB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0x94369426fba3146bb65b6ef7b4e803f9a374ad21615ff2d1d2097ab3bb0a13b2"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 11292236,
        "transactionHash": "0x3f42739a12bc0cd27ec2f5178128b0d78febeff26a4e7cee7545084d5489fc99",
        "address": "0xd91E8EdB413f8F939C52063e12D51921344BabcB",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x0000000000000000000000000000000000000000033b2e3c9fd0803ce8000000",
        "logIndex": 8,
        "blockHash": "0x94369426fba3146bb65b6ef7b4e803f9a374ad21615ff2d1d2097ab3bb0a13b2"
      }
    ],
    "blockNumber": 11292236,
    "cumulativeGasUsed": "2205096",
    "status": 1,
    "byzantium": true
  },
  "blockNumber": 11292236,
  "args": ["0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54"],
  "solcInputHash": "e3e56b2bf739817bae29b5001598093f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromDelegate\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toDelegate\",\"type\":\"address\"}],\"name\":\"DelegateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"DelegateVotesChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATION_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"checkpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fromBlock\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"votes\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegatee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"delegateBySig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegates\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getPriorVotes\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"numCheckpoints\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rawAmount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"account\":\"The address of the account holding the funds\",\"spender\":\"The address of the account spending the funds\"},\"returns\":{\"_0\":\"The number of tokens approved\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"rawAmount\":\"The number of tokens that are approved (2^256-1 means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"account\":\"The address of the account to get the balance of\"},\"returns\":{\"_0\":\"The number of tokens held\"}},\"burn(address,uint256)\":{\"params\":{\"account\":\"Owner of removed token.\",\"amount\":\"Amount of token to be removed.\"}},\"constructor\":{\"params\":{\"account\":\"The initial account to grant all the tokens\"}},\"delegate(address)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\"}},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"delegatee\":\"The address to delegate votes to\",\"expiry\":\"The time at which to expire the signature\",\"nonce\":\"The contract state required to match the signature\",\"r\":\"Half of the ECDSA signature pair\",\"s\":\"Half of the ECDSA signature pair\",\"v\":\"The recovery byte of the signature\"}},\"getCurrentVotes(address)\":{\"params\":{\"account\":\"The address to get votes balance\"},\"returns\":{\"_0\":\"The number of current votes for `account`\"}},\"getPriorVotes(address,uint256)\":{\"details\":\"Block number must be a finalized block or else this function will revert to prevent misinformation.\",\"params\":{\"account\":\"The address of the account to check\",\"blockNumber\":\"The block number to get the vote balance at\"},\"returns\":{\"_0\":\"The number of votes the account had as of the given block\"}},\"mint(address,uint256)\":{\"params\":{\"account\":\"Recipient of created token.\",\"amount\":\"Amount of token to be created.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transfer(address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"dst\":\"The address of the destination account\",\"rawAmount\":\"The number of tokens to transfer\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"The standard EIP-20 approval event\"},\"DelegateChanged(address,address,address)\":{\"notice\":\"An event thats emitted when an account changes its delegate\"},\"DelegateVotesChanged(address,uint256,uint256)\":{\"notice\":\"An event thats emitted when a delegate account's vote balance changes\"},\"Transfer(address,address,uint256)\":{\"notice\":\"The standard EIP-20 transfer event\"}},\"kind\":\"user\",\"methods\":{\"DELEGATION_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the delegation struct used by the contract\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"The EIP-712 typehash for the contract's domain\"},\"allowance(address,address)\":{\"notice\":\"Get the number of tokens `spender` is approved to spend on behalf of `account`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens held by the `account`\"},\"checkpoints(address,uint32)\":{\"notice\":\"A record of votes checkpoints for each account, by index\"},\"constructor\":{\"notice\":\"Construct a new GovernanceToken token\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"delegate(address)\":{\"notice\":\"Delegate votes from `msg.sender` to `delegatee`\"},\"delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Delegates votes from signatory to `delegatee`\"},\"delegates(address)\":{\"notice\":\"A record of each accounts delegate\"},\"getCurrentVotes(address)\":{\"notice\":\"Gets the current votes balance for `account`\"},\"getPriorVotes(address,uint256)\":{\"notice\":\"Determine the prior number of votes for an account as of a block number\"},\"mint(address,uint256)\":{\"notice\":\"Creates `amount` tokens and assigns them to `account`, increasing the total supply.\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"nonces(address)\":{\"notice\":\"A record of states for signing / validating signatures\"},\"numCheckpoints(address)\":{\"notice\":\"The number of checkpoints for each account\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/GovernanceToken.sol\":\"GovernanceToken\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/governance/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable private-vars-leading-underscore\\ncontract GovernanceToken is Ownable {\\n  /// @notice EIP-20 token name for this token\\n  string public constant name = \\\"DeFiHelper Governance Token\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public constant symbol = \\\"DFH\\\";\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  /// @notice Total number of tokens in circulation\\n  uint256 public totalSupply = 1_000_000_000e18; // 1 billion GovernanceToken\\n\\n  /// @notice Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /// @notice Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint256) public nonces;\\n\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Construct a new GovernanceToken token\\n   * @param account The initial account to grant all the tokens\\n   */\\n  constructor(address account) {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * @param account Recipient of created token.\\n   * @param amount Amount of token to be created.\\n   */\\n  function mint(address account, uint256 amount) public onlyOwner {\\n    _mint(account, amount);\\n  }\\n\\n  /**\\n   * @param account Owner of removed token.\\n   * @param amount Amount of token to be removed.\\n   */\\n  function burn(address account, uint256 amount) public onlyOwner {\\n    _burn(account, amount);\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) external view returns (uint256) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == 2**256 - 1) {\\n      amount = 2**96 - 1;\\n    } else {\\n      amount = safe96(rawAmount, \\\"GovernanceToken::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) external view returns (uint256) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 rawAmount\\n  ) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != 2**96 - 1) {\\n      uint96 newAllowance = sub96(\\n        spenderAllowance,\\n        amount,\\n        \\\"GovernanceToken::transferFrom: transfer amount exceeds spender allowance\\\"\\n      );\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @notice Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 domainSeparator = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n    );\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"GovernanceToken::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"GovernanceToken::delegateBySig: invalid nonce\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(block.timestamp <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  /**\\n   * @notice Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @notice Determine the prior number of votes for an account as of a block number\\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n    require(blockNumber < block.number, \\\"GovernanceToken::getPriorVotes: not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(\\n    address src,\\n    address dst,\\n    uint96 amount\\n  ) internal {\\n    require(src != address(0), \\\"GovernanceToken::_transferTokens: cannot transfer from the zero address\\\");\\n    require(dst != address(0), \\\"GovernanceToken::_transferTokens: cannot transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"GovernanceToken::_transferTokens: transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"GovernanceToken::_transferTokens: transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(\\n    address srcRep,\\n    address dstRep,\\n    uint96 amount\\n  ) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"GovernanceToken::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"GovernanceToken::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n  function _mint(address account, uint256 rawAmount) internal virtual {\\n    require(account != address(0), \\\"GovernanceToken::_mint: mint to the zero address\\\");\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::_mint: amount exceeds 96 bits\\\");\\n\\n    totalSupply += amount;\\n    balances[account] = add96(balances[account], amount, \\\"GovernanceToken::_mint: mint amount overflows\\\");\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 rawAmount) internal virtual {\\n    require(account != address(0), \\\"GovernanceToken::_burn: burn from the zero address\\\");\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::_burn: amount exceeds 96 bits\\\");\\n\\n    balances[account] = sub96(balances[account], amount, \\\"GovernanceToken::_burn: burn amount exceeds balance\\\");\\n    totalSupply -= amount;\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n    require(n < 2**96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint256) {\\n    uint256 chainId;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0x046e4fd10e047b14f6294bdfdb33a7bc7968acb5818c953f2d66bb4d3561ede0\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040526b033b2e3c9fd0803ce80000006001553480156200002157600080fd5b506040516200208f3803806200208f833981016040819052620000449162000119565b6200004f33620000c9565b600180546001600160a01b038316600081815260036020908152604080832080546001600160601b0319166001600160601b039096169590951790945593549251928352909290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3506200014b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156200012c57600080fd5b81516001600160a01b03811681146200014457600080fd5b9392505050565b611f34806200015b6000396000f3fe608060405234801561001057600080fd5b50600436106101585760003560e01c8063782d6fe1116100c3578063b4b5ea571161007c578063b4b5ea57146103bf578063c3cda520146103d2578063dd62ed3e146103e5578063e7a324dc14610427578063f1127ed81461044e578063f2fde38b146104b557600080fd5b8063782d6fe11461031b5780637ecebe00146103465780638da5cb5b1461036657806395d89b41146103775780639dc29fac14610399578063a9059cbb146103ac57600080fd5b806340c10f191161011557806340c10f191461023d578063587cde1e146102525780635c19a95c146102935780636fcfff45146102a657806370a08231146102e1578063715018a61461031357600080fd5b806306fdde031461015d578063095ea7b3146101af57806318160ddd146101d257806320606b70146101e957806323b872dd14610210578063313ce56714610223575b600080fd5b6101996040518060400160405280601b81526020017f4465466948656c70657220476f7665726e616e636520546f6b656e000000000081525081565b6040516101a69190611acf565b60405180910390f35b6101c26101bd366004611a05565b6104c8565b60405190151581526020016101a6565b6101db60015481565b6040519081526020016101a6565b6101db7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101c261021e3660046119c9565b610589565b61022b601281565b60405160ff90911681526020016101a6565b61025061024b366004611a05565b6106d5565b005b61027b61026036600461197b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6102506102a136600461197b565b610716565b6102cc6102b436600461197b565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016101a6565b6101db6102ef36600461197b565b6001600160a01b03166000908152600360205260409020546001600160601b031690565b610250610723565b61032e610329366004611a05565b610759565b6040516001600160601b0390911681526020016101a6565b6101db61035436600461197b565b60076020526000908152604090205481565b6000546001600160a01b031661027b565b610199604051806040016040528060038152602001620888c960eb1b81525081565b6102506103a7366004611a05565b6109eb565b6101c26103ba366004611a05565b610a1f565b61032e6103cd36600461197b565b610a5b565b6102506103e0366004611a2f565b610ad9565b6101db6103f3366004611996565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b6101db7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b61049161045c366004611a8f565b600560209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b039091166020830152016101a6565b6102506104c336600461197b565b610dfb565b6000808260001914156104e357506001600160601b03610508565b61050583604051806060016040528060308152602001611e1860309139610e93565b90505b3360008181526002602090815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b6001600160a01b03831660009081526002602090815260408083203380855290835281842054825160608101909352603080845291936001600160601b039091169285926105e19288929190611e1890830139610e93565b9050866001600160a01b0316836001600160a01b0316141580156106155750816001600160601b03166001600160601b0314155b156106bd57600061063f8383604051806080016040528060488152602001611e4860489139610ec2565b6001600160a01b038981166000818152600260209081526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6106c8878783610f0c565b5060019695505050505050565b6000546001600160a01b031633146107085760405162461bcd60e51b81526004016106ff90611b24565b60405180910390fd5b610712828261117b565b5050565b61072033826112eb565b50565b6000546001600160a01b0316331461074d5760405162461bcd60e51b81526004016106ff90611b24565b6107576000611375565b565b60004382106107c55760405162461bcd60e51b815260206004820152603260248201527f476f7665726e616e6365546f6b656e3a3a6765745072696f72566f7465733a206044820152711b9bdd081e595d0819195d195c9b5a5b995960721b60648201526084016106ff565b6001600160a01b03831660009081526006602052604090205463ffffffff16806107f3576000915050610583565b6001600160a01b03841660009081526005602052604081208491610818600185611c03565b63ffffffff9081168252602082019290925260400160002054161161088b576001600160a01b03841660009081526005602052604081209061085b600184611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506105839050565b6001600160a01b038416600090815260056020908152604080832083805290915290205463ffffffff168310156108c6576000915050610583565b6000806108d4600184611c03565b90505b8163ffffffff168163ffffffff1611156109a657600060026108f98484611c03565b6109039190611bbb565b61090d9083611c03565b6001600160a01b038816600090815260056020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915291925087141561097a576020015194506105839350505050565b805163ffffffff168711156109915781935061099f565b61099c600183611c03565b92505b50506108d7565b506001600160a01b038516600090815260056020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6000546001600160a01b03163314610a155760405162461bcd60e51b81526004016106ff90611b24565b61071282826113c5565b600080610a4483604051806060016040528060318152602001611de760319139610e93565b9050610a51338583610f0c565b5060019392505050565b6001600160a01b03811660009081526006602052604081205463ffffffff1680610a86576000610ad2565b6001600160a01b038316600090815260056020526040812090610aaa600184611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b604080518082018252601b81527f4465466948656c70657220476f7665726e616e636520546f6b656e000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fd7c8c6107487837a1771c108a0a2a705c25f429fa16bc096355ca3ce9077c90881840152466060820152306080808301919091528351808303909101815260a0820184528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08301526001600160a01b038a1660e083015261010082018990526101208083018990528451808403909101815261014083019094528351939092019290922061190160f01b6101608401526101628301829052610182830181905290916000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610c71573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610cee5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a20604482015270696e76616c6964207369676e617475726560781b60648201526084016106ff565b6001600160a01b0381166000908152600760205260408120805491610d1283611c48565b919050558914610d7a5760405162461bcd60e51b815260206004820152602d60248201527f476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a2060448201526c696e76616c6964206e6f6e636560981b60648201526084016106ff565b87421115610de45760405162461bcd60e51b815260206004820152603160248201527f476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a206044820152701cda59db985d1d5c9948195e1c1a5c9959607a1b60648201526084016106ff565b610dee818b6112eb565b505050505b505050505050565b6000546001600160a01b03163314610e255760405162461bcd60e51b81526004016106ff90611b24565b6001600160a01b038116610e8a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ff565b61072081611375565b600081600160601b8410610eba5760405162461bcd60e51b81526004016106ff9190611acf565b509192915050565b6000836001600160601b0316836001600160601b031611158290610ef95760405162461bcd60e51b81526004016106ff9190611acf565b50610f048385611c28565b949350505050565b6001600160a01b038316610f985760405162461bcd60e51b815260206004820152604760248201527f476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e7360448201527f3a2063616e6e6f74207472616e736665722066726f6d20746865207a65726f206064820152666164647265737360c81b608482015260a4016106ff565b6001600160a01b0382166110225760405162461bcd60e51b815260206004820152604560248201527f476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e7360448201527f3a2063616e6e6f74207472616e7366657220746f20746865207a65726f206164606482015264647265737360d81b608482015260a4016106ff565b6001600160a01b03831660009081526003602090815260409182902054825160808101909352604180845261106d936001600160601b039092169285929190611ebe90830139610ec2565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352603b8084526110d59491909116928592909190611ceb9083013961154b565b6001600160a01b0383811660008181526003602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526004602052604080822054858416835291205461117692918216911683611598565b505050565b6001600160a01b0382166111ea5760405162461bcd60e51b815260206004820152603060248201527f476f7665726e616e6365546f6b656e3a3a5f6d696e743a206d696e7420746f2060448201526f746865207a65726f206164647265737360801b60648201526084016106ff565b600061120e826040518060600160405280602e8152602001611e90602e9139610e93565b9050806001600160601b03166001600082825461122b9190611b59565b90915550506001600160a01b03831660009081526003602090815260409182902054825160608101909352602d80845261127b936001600160601b039092169285929190611d269083013961154b565b6001600160a01b038416600081815260036020908152604080832080546001600160601b0319166001600160601b03968716179055519385168452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a3505050565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a461136f828483611598565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166114365760405162461bcd60e51b815260206004820152603260248201527f476f7665726e616e6365546f6b656e3a3a5f6275726e3a206275726e2066726f6044820152716d20746865207a65726f206164647265737360701b60648201526084016106ff565b600061145a826040518060600160405280602e8152602001611d86602e9139610e93565b90506114b760036000856001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160601b031682604051806060016040528060338152602001611db460339139610ec2565b6001600160a01b038416600090815260036020526040812080546001600160601b0319166001600160601b0393841617905560018054928416929091906114ff908490611bec565b90915550506040516001600160601b03821681526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016112de565b6000806115588486611b99565b9050846001600160601b0316816001600160601b03161015839061158f5760405162461bcd60e51b81526004016106ff9190611acf565b50949350505050565b816001600160a01b0316836001600160a01b0316141580156115c357506000816001600160601b0316115b15611176576001600160a01b03831615611688576001600160a01b03831660009081526006602052604081205463ffffffff16908161160357600061164f565b6001600160a01b038516600090815260056020526040812090611627600185611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006116768285604051806060016040528060338152602001611d5360339139610ec2565b905061168486848484611740565b5050505b6001600160a01b03821615611176576001600160a01b03821660009081526006602052604081205463ffffffff1690816116c357600061170f565b6001600160a01b0384166000908152600560205260408120906116e7600185611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006117368285604051806060016040528060328152602001611cb96032913961154b565b9050610df3858484845b6000611764436040518060600160405280603f8152602001611c7a603f9139611938565b905060008463ffffffff161180156117be57506001600160a01b038516600090815260056020526040812063ffffffff8316916117a2600188611c03565b63ffffffff908116825260208201929092526040016000205416145b15611832576001600160a01b038516600090815260056020526040812083916117e8600188611c03565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff00000000199092169190911790556118e3565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600582528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff199094169116179190911790556118b2846001611b71565b6001600160a01b0386166000908152600660205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b8410610eba5760405162461bcd60e51b81526004016106ff9190611acf565b80356001600160a01b038116811461197657600080fd5b919050565b60006020828403121561198d57600080fd5b610ad28261195f565b600080604083850312156119a957600080fd5b6119b28361195f565b91506119c06020840161195f565b90509250929050565b6000806000606084860312156119de57600080fd5b6119e78461195f565b92506119f56020850161195f565b9150604084013590509250925092565b60008060408385031215611a1857600080fd5b611a218361195f565b946020939093013593505050565b60008060008060008060c08789031215611a4857600080fd5b611a518761195f565b95506020870135945060408701359350606087013560ff81168114611a7557600080fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611aa257600080fd5b611aab8361195f565b9150602083013563ffffffff81168114611ac457600080fd5b809150509250929050565b600060208083528351808285015260005b81811015611afc57858101830151858201604001528201611ae0565b81811115611b0e576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611b6c57611b6c611c63565b500190565b600063ffffffff808316818516808303821115611b9057611b90611c63565b01949350505050565b60006001600160601b03808316818516808303821115611b9057611b90611c63565b600063ffffffff80841680611be057634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600082821015611bfe57611bfe611c63565b500390565b600063ffffffff83811690831681811015611c2057611c20611c63565b039392505050565b60006001600160601b0383811690831681811015611c2057611c20611c63565b6000600019821415611c5c57611c5c611c63565b5060010190565b634e487b7160e01b600052601160045260246000fdfe476f7665726e616e6365546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473476f7665726e616e6365546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773476f7665726e616e6365546f6b656e3a3a5f6d696e743a206d696e7420616d6f756e74206f766572666c6f7773476f7665726e616e6365546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773476f7665726e616e6365546f6b656e3a3a5f6275726e3a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a5f6275726e3a206275726e20616d6f756e7420657863656564732062616c616e6365476f7665726e616e6365546f6b656e3a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a617070726f76653a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365476f7665726e616e6365546f6b656e3a3a5f6d696e743a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365a2646970667358221220463a8991d5fbc5aa72ec4ccd7263140eab105bd78afb7f768d482267cf0a553064736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101585760003560e01c8063782d6fe1116100c3578063b4b5ea571161007c578063b4b5ea57146103bf578063c3cda520146103d2578063dd62ed3e146103e5578063e7a324dc14610427578063f1127ed81461044e578063f2fde38b146104b557600080fd5b8063782d6fe11461031b5780637ecebe00146103465780638da5cb5b1461036657806395d89b41146103775780639dc29fac14610399578063a9059cbb146103ac57600080fd5b806340c10f191161011557806340c10f191461023d578063587cde1e146102525780635c19a95c146102935780636fcfff45146102a657806370a08231146102e1578063715018a61461031357600080fd5b806306fdde031461015d578063095ea7b3146101af57806318160ddd146101d257806320606b70146101e957806323b872dd14610210578063313ce56714610223575b600080fd5b6101996040518060400160405280601b81526020017f4465466948656c70657220476f7665726e616e636520546f6b656e000000000081525081565b6040516101a69190611acf565b60405180910390f35b6101c26101bd366004611a05565b6104c8565b60405190151581526020016101a6565b6101db60015481565b6040519081526020016101a6565b6101db7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b6101c261021e3660046119c9565b610589565b61022b601281565b60405160ff90911681526020016101a6565b61025061024b366004611a05565b6106d5565b005b61027b61026036600461197b565b6004602052600090815260409020546001600160a01b031681565b6040516001600160a01b0390911681526020016101a6565b6102506102a136600461197b565b610716565b6102cc6102b436600461197b565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff90911681526020016101a6565b6101db6102ef36600461197b565b6001600160a01b03166000908152600360205260409020546001600160601b031690565b610250610723565b61032e610329366004611a05565b610759565b6040516001600160601b0390911681526020016101a6565b6101db61035436600461197b565b60076020526000908152604090205481565b6000546001600160a01b031661027b565b610199604051806040016040528060038152602001620888c960eb1b81525081565b6102506103a7366004611a05565b6109eb565b6101c26103ba366004611a05565b610a1f565b61032e6103cd36600461197b565b610a5b565b6102506103e0366004611a2f565b610ad9565b6101db6103f3366004611996565b6001600160a01b0391821660009081526002602090815260408083209390941682529190915220546001600160601b031690565b6101db7fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf81565b61049161045c366004611a8f565b600560209081526000928352604080842090915290825290205463ffffffff811690600160201b90046001600160601b031682565b6040805163ffffffff90931683526001600160601b039091166020830152016101a6565b6102506104c336600461197b565b610dfb565b6000808260001914156104e357506001600160601b03610508565b61050583604051806060016040528060308152602001611e1860309139610e93565b90505b3360008181526002602090815260408083206001600160a01b0389168085529083529281902080546001600160601b0319166001600160601b03871690811790915590519081529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a360019150505b92915050565b6001600160a01b03831660009081526002602090815260408083203380855290835281842054825160608101909352603080845291936001600160601b039091169285926105e19288929190611e1890830139610e93565b9050866001600160a01b0316836001600160a01b0316141580156106155750816001600160601b03166001600160601b0314155b156106bd57600061063f8383604051806080016040528060488152602001611e4860489139610ec2565b6001600160a01b038981166000818152600260209081526040808320948a168084529482529182902080546001600160601b0319166001600160601b0387169081179091559151918252939450919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505b6106c8878783610f0c565b5060019695505050505050565b6000546001600160a01b031633146107085760405162461bcd60e51b81526004016106ff90611b24565b60405180910390fd5b610712828261117b565b5050565b61072033826112eb565b50565b6000546001600160a01b0316331461074d5760405162461bcd60e51b81526004016106ff90611b24565b6107576000611375565b565b60004382106107c55760405162461bcd60e51b815260206004820152603260248201527f476f7665726e616e6365546f6b656e3a3a6765745072696f72566f7465733a206044820152711b9bdd081e595d0819195d195c9b5a5b995960721b60648201526084016106ff565b6001600160a01b03831660009081526006602052604090205463ffffffff16806107f3576000915050610583565b6001600160a01b03841660009081526005602052604081208491610818600185611c03565b63ffffffff9081168252602082019290925260400160002054161161088b576001600160a01b03841660009081526005602052604081209061085b600184611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b031691506105839050565b6001600160a01b038416600090815260056020908152604080832083805290915290205463ffffffff168310156108c6576000915050610583565b6000806108d4600184611c03565b90505b8163ffffffff168163ffffffff1611156109a657600060026108f98484611c03565b6109039190611bbb565b61090d9083611c03565b6001600160a01b038816600090815260056020908152604080832063ffffffff858116855290835292819020815180830190925254928316808252600160201b9093046001600160601b03169181019190915291925087141561097a576020015194506105839350505050565b805163ffffffff168711156109915781935061099f565b61099c600183611c03565b92505b50506108d7565b506001600160a01b038516600090815260056020908152604080832063ffffffff909416835292905220546001600160601b03600160201b9091041691505092915050565b6000546001600160a01b03163314610a155760405162461bcd60e51b81526004016106ff90611b24565b61071282826113c5565b600080610a4483604051806060016040528060318152602001611de760319139610e93565b9050610a51338583610f0c565b5060019392505050565b6001600160a01b03811660009081526006602052604081205463ffffffff1680610a86576000610ad2565b6001600160a01b038316600090815260056020526040812090610aaa600184611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b9392505050565b604080518082018252601b81527f4465466948656c70657220476f7665726e616e636520546f6b656e000000000060209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527fd7c8c6107487837a1771c108a0a2a705c25f429fa16bc096355ca3ce9077c90881840152466060820152306080808301919091528351808303909101815260a0820184528051908301207fe48329057bfd03d55e49b547132e39cffd9c1820ad7b9d4c5307691425d15adf60c08301526001600160a01b038a1660e083015261010082018990526101208083018990528451808403909101815261014083019094528351939092019290922061190160f01b6101608401526101628301829052610182830181905290916000906101a20160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8a169284019290925260608301889052608083018790529092509060019060a0016020604051602081039080840390855afa158015610c71573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610cee5760405162461bcd60e51b815260206004820152603160248201527f476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a20604482015270696e76616c6964207369676e617475726560781b60648201526084016106ff565b6001600160a01b0381166000908152600760205260408120805491610d1283611c48565b919050558914610d7a5760405162461bcd60e51b815260206004820152602d60248201527f476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a2060448201526c696e76616c6964206e6f6e636560981b60648201526084016106ff565b87421115610de45760405162461bcd60e51b815260206004820152603160248201527f476f7665726e616e6365546f6b656e3a3a64656c656761746542795369673a206044820152701cda59db985d1d5c9948195e1c1a5c9959607a1b60648201526084016106ff565b610dee818b6112eb565b505050505b505050505050565b6000546001600160a01b03163314610e255760405162461bcd60e51b81526004016106ff90611b24565b6001600160a01b038116610e8a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016106ff565b61072081611375565b600081600160601b8410610eba5760405162461bcd60e51b81526004016106ff9190611acf565b509192915050565b6000836001600160601b0316836001600160601b031611158290610ef95760405162461bcd60e51b81526004016106ff9190611acf565b50610f048385611c28565b949350505050565b6001600160a01b038316610f985760405162461bcd60e51b815260206004820152604760248201527f476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e7360448201527f3a2063616e6e6f74207472616e736665722066726f6d20746865207a65726f206064820152666164647265737360c81b608482015260a4016106ff565b6001600160a01b0382166110225760405162461bcd60e51b815260206004820152604560248201527f476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e7360448201527f3a2063616e6e6f74207472616e7366657220746f20746865207a65726f206164606482015264647265737360d81b608482015260a4016106ff565b6001600160a01b03831660009081526003602090815260409182902054825160808101909352604180845261106d936001600160601b039092169285929190611ebe90830139610ec2565b6001600160a01b03848116600090815260036020908152604080832080546001600160601b0319166001600160601b0396871617905592861682529082902054825160608101909352603b8084526110d59491909116928592909190611ceb9083013961154b565b6001600160a01b0383811660008181526003602090815260409182902080546001600160601b0319166001600160601b03968716179055905193851684529092918616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a36001600160a01b0380841660009081526004602052604080822054858416835291205461117692918216911683611598565b505050565b6001600160a01b0382166111ea5760405162461bcd60e51b815260206004820152603060248201527f476f7665726e616e6365546f6b656e3a3a5f6d696e743a206d696e7420746f2060448201526f746865207a65726f206164647265737360801b60648201526084016106ff565b600061120e826040518060600160405280602e8152602001611e90602e9139610e93565b9050806001600160601b03166001600082825461122b9190611b59565b90915550506001600160a01b03831660009081526003602090815260409182902054825160608101909352602d80845261127b936001600160601b039092169285929190611d269083013961154b565b6001600160a01b038416600081815260036020908152604080832080546001600160601b0319166001600160601b03968716179055519385168452919290917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a3505050565b6001600160a01b03808316600081815260046020818152604080842080546003845282862054949093528787166001600160a01b031984168117909155905191909516946001600160601b039092169391928592917f3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f9190a461136f828483611598565b50505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166114365760405162461bcd60e51b815260206004820152603260248201527f476f7665726e616e6365546f6b656e3a3a5f6275726e3a206275726e2066726f6044820152716d20746865207a65726f206164647265737360701b60648201526084016106ff565b600061145a826040518060600160405280602e8152602001611d86602e9139610e93565b90506114b760036000856001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160601b031682604051806060016040528060338152602001611db460339139610ec2565b6001600160a01b038416600090815260036020526040812080546001600160601b0319166001600160601b0393841617905560018054928416929091906114ff908490611bec565b90915550506040516001600160601b03821681526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016112de565b6000806115588486611b99565b9050846001600160601b0316816001600160601b03161015839061158f5760405162461bcd60e51b81526004016106ff9190611acf565b50949350505050565b816001600160a01b0316836001600160a01b0316141580156115c357506000816001600160601b0316115b15611176576001600160a01b03831615611688576001600160a01b03831660009081526006602052604081205463ffffffff16908161160357600061164f565b6001600160a01b038516600090815260056020526040812090611627600185611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006116768285604051806060016040528060338152602001611d5360339139610ec2565b905061168486848484611740565b5050505b6001600160a01b03821615611176576001600160a01b03821660009081526006602052604081205463ffffffff1690816116c357600061170f565b6001600160a01b0384166000908152600560205260408120906116e7600185611c03565b63ffffffff168152602081019190915260400160002054600160201b90046001600160601b03165b905060006117368285604051806060016040528060328152602001611cb96032913961154b565b9050610df3858484845b6000611764436040518060600160405280603f8152602001611c7a603f9139611938565b905060008463ffffffff161180156117be57506001600160a01b038516600090815260056020526040812063ffffffff8316916117a2600188611c03565b63ffffffff908116825260208201929092526040016000205416145b15611832576001600160a01b038516600090815260056020526040812083916117e8600188611c03565b63ffffffff168152602081019190915260400160002080546001600160601b0392909216600160201b026fffffffffffffffffffffffff00000000199092169190911790556118e3565b60408051808201825263ffffffff80841682526001600160601b0380861660208085019182526001600160a01b038b166000908152600582528681208b8616825290915294909420925183549451909116600160201b026fffffffffffffffffffffffffffffffff199094169116179190911790556118b2846001611b71565b6001600160a01b0386166000908152600660205260409020805463ffffffff191663ffffffff929092169190911790555b604080516001600160601b038086168252841660208201526001600160a01b038716917fdec2bacdd2f05b59de34da9b523dff8be42e5e38e818c82fdb0bae774387a724910160405180910390a25050505050565b600081600160201b8410610eba5760405162461bcd60e51b81526004016106ff9190611acf565b80356001600160a01b038116811461197657600080fd5b919050565b60006020828403121561198d57600080fd5b610ad28261195f565b600080604083850312156119a957600080fd5b6119b28361195f565b91506119c06020840161195f565b90509250929050565b6000806000606084860312156119de57600080fd5b6119e78461195f565b92506119f56020850161195f565b9150604084013590509250925092565b60008060408385031215611a1857600080fd5b611a218361195f565b946020939093013593505050565b60008060008060008060c08789031215611a4857600080fd5b611a518761195f565b95506020870135945060408701359350606087013560ff81168114611a7557600080fd5b9598949750929560808101359460a0909101359350915050565b60008060408385031215611aa257600080fd5b611aab8361195f565b9150602083013563ffffffff81168114611ac457600080fd5b809150509250929050565b600060208083528351808285015260005b81811015611afc57858101830151858201604001528201611ae0565b81811115611b0e576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115611b6c57611b6c611c63565b500190565b600063ffffffff808316818516808303821115611b9057611b90611c63565b01949350505050565b60006001600160601b03808316818516808303821115611b9057611b90611c63565b600063ffffffff80841680611be057634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b600082821015611bfe57611bfe611c63565b500390565b600063ffffffff83811690831681811015611c2057611c20611c63565b039392505050565b60006001600160601b0383811690831681811015611c2057611c20611c63565b6000600019821415611c5c57611c5c611c63565b5060010190565b634e487b7160e01b600052601160045260246000fdfe476f7665726e616e6365546f6b656e3a3a5f7772697465436865636b706f696e743a20626c6f636b206e756d62657220657863656564732033322062697473476f7665726e616e6365546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e74206f766572666c6f7773476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e74206f766572666c6f7773476f7665726e616e6365546f6b656e3a3a5f6d696e743a206d696e7420616d6f756e74206f766572666c6f7773476f7665726e616e6365546f6b656e3a3a5f6d6f7665566f7465733a20766f746520616d6f756e7420756e646572666c6f7773476f7665726e616e6365546f6b656e3a3a5f6275726e3a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a5f6275726e3a206275726e20616d6f756e7420657863656564732062616c616e6365476f7665726e616e6365546f6b656e3a3a7472616e736665723a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a617070726f76653a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a7472616e7366657246726f6d3a207472616e7366657220616d6f756e742065786365656473207370656e64657220616c6c6f77616e6365476f7665726e616e6365546f6b656e3a3a5f6d696e743a20616d6f756e7420657863656564732039362062697473476f7665726e616e6365546f6b656e3a3a5f7472616e73666572546f6b656e733a207472616e7366657220616d6f756e7420657863656564732062616c616e6365a2646970667358221220463a8991d5fbc5aa72ec4ccd7263140eab105bd78afb7f768d482267cf0a553064736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "params": {
          "account": "The address of the account holding the funds",
          "spender": "The address of the account spending the funds"
        },
        "returns": {
          "_0": "The number of tokens approved"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "rawAmount": "The number of tokens that are approved (2^256-1 means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "account": "The address of the account to get the balance of"
        },
        "returns": {
          "_0": "The number of tokens held"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "account": "Owner of removed token.",
          "amount": "Amount of token to be removed."
        }
      },
      "constructor": {
        "params": {
          "account": "The initial account to grant all the tokens"
        }
      },
      "delegate(address)": {
        "params": {
          "delegatee": "The address to delegate votes to"
        }
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "delegatee": "The address to delegate votes to",
          "expiry": "The time at which to expire the signature",
          "nonce": "The contract state required to match the signature",
          "r": "Half of the ECDSA signature pair",
          "s": "Half of the ECDSA signature pair",
          "v": "The recovery byte of the signature"
        }
      },
      "getCurrentVotes(address)": {
        "params": {
          "account": "The address to get votes balance"
        },
        "returns": {
          "_0": "The number of current votes for `account`"
        }
      },
      "getPriorVotes(address,uint256)": {
        "details": "Block number must be a finalized block or else this function will revert to prevent misinformation.",
        "params": {
          "account": "The address of the account to check",
          "blockNumber": "The block number to get the vote balance at"
        },
        "returns": {
          "_0": "The number of votes the account had as of the given block"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "account": "Recipient of created token.",
          "amount": "Amount of token to be created."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transfer(address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "dst": "The address of the destination account",
          "rawAmount": "The number of tokens to transfer",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "notice": "The standard EIP-20 approval event"
      },
      "DelegateChanged(address,address,address)": {
        "notice": "An event thats emitted when an account changes its delegate"
      },
      "DelegateVotesChanged(address,uint256,uint256)": {
        "notice": "An event thats emitted when a delegate account's vote balance changes"
      },
      "Transfer(address,address,uint256)": {
        "notice": "The standard EIP-20 transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "DELEGATION_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the delegation struct used by the contract"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "The EIP-712 typehash for the contract's domain"
      },
      "allowance(address,address)": {
        "notice": "Get the number of tokens `spender` is approved to spend on behalf of `account`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens held by the `account`"
      },
      "checkpoints(address,uint32)": {
        "notice": "A record of votes checkpoints for each account, by index"
      },
      "constructor": {
        "notice": "Construct a new GovernanceToken token"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "delegate(address)": {
        "notice": "Delegate votes from `msg.sender` to `delegatee`"
      },
      "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Delegates votes from signatory to `delegatee`"
      },
      "delegates(address)": {
        "notice": "A record of each accounts delegate"
      },
      "getCurrentVotes(address)": {
        "notice": "Gets the current votes balance for `account`"
      },
      "getPriorVotes(address,uint256)": {
        "notice": "Determine the prior number of votes for an account as of a block number"
      },
      "mint(address,uint256)": {
        "notice": "Creates `amount` tokens and assigns them to `account`, increasing the total supply."
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "nonces(address)": {
        "notice": "A record of states for signing / validating signatures"
      },
      "numCheckpoints(address)": {
        "notice": "The number of checkpoints for each account"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3377,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3384,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint96))"
      },
      {
        "astId": 3389,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint96)"
      },
      {
        "astId": 3394,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "delegates",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 3407,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "checkpoints",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)3399_storage))"
      },
      {
        "astId": 3412,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "numCheckpoints",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 3429,
        "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
        "label": "nonces",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint96))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint96))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint96)"
      },
      "t_mapping(t_address,t_mapping(t_uint32,t_struct(Checkpoint)3399_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint32 => struct GovernanceToken.Checkpoint))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint32,t_struct(Checkpoint)3399_storage)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_address,t_uint96)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint96)",
        "numberOfBytes": "32",
        "value": "t_uint96"
      },
      "t_mapping(t_uint32,t_struct(Checkpoint)3399_storage)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => struct GovernanceToken.Checkpoint)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoint)3399_storage"
      },
      "t_struct(Checkpoint)3399_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceToken.Checkpoint",
        "members": [
          {
            "astId": 3396,
            "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
            "label": "fromBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3398,
            "contract": "contracts/governance/GovernanceToken.sol:GovernanceToken",
            "label": "votes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}
