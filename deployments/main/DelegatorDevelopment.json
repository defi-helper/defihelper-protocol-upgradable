{
  "name": "DelegatorDevelopment",
  "address": "0x36d97da2a1925681548b7b8893f6c18264ecb4a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract GovernanceToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5bad8467e817d48560b51ea80b2942b79e20a5fa42e5302985867c82c16fcada",
  "receipt": {
    "to": null,
    "from": "0xbb73463b88b0cb9681f176d6d43a12c2fea2c237",
    "contractAddress": "0x36d97da2a1925681548b7b8893f6c18264ecb4a7",
    "transactionIndex": "0x1d",
    "gasUsed": "0x584f9",
    "logsBloom": "0x
    "blockHash": "0xe1f766657924efd58d8ac3d5268d63deb608b4bef4d239b6f85d80a103e56807",
    "transactionHash": "0x63f0a81f94a3bc743b1d0ea8bcb9390d342cefb22132f1799f3e3029ed4dcb5c",
    "logs": [
      {
        "address": "0x36d97da2a1925681548b7b8893f6c18264ecb4a7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bb73463b88b0cb9681f176d6d43a12c2fea2c237"
        ],
        "data": "0x",
        "blockNumber": "0xe50026",
        "transactionHash": "0x63f0a81f94a3bc743b1d0ea8bcb9390d342cefb22132f1799f3e3029ed4dcb5c",
        "transactionIndex": "0x1d",
        "blockHash": "0xe1f766657924efd58d8ac3d5268d63deb608b4bef4d239b6f85d80a103e56807",
        "logIndex": "0x18",
        "removed": false
      },
      {
        "address": "0x5f2080542ab6ae7e0b06778f0b2d263006297840",
        "topics": [
          "0x3134e8a2e6d97e929a7e54011ea5485d7d196dd5f0ba4d4ef95803e8e3fc257f",
          "0x00000000000000000000000036d97da2a1925681548b7b8893f6c18264ecb4a7",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000401affbfae54260e51da27462e51b27524eaba4a"
        ],
        "data": "0x",
        "blockNumber": "0xe50026",
        "transactionHash": "0x63f0a81f94a3bc743b1d0ea8bcb9390d342cefb22132f1799f3e3029ed4dcb5c",
        "transactionIndex": "0x1d",
        "blockHash": "0xe1f766657924efd58d8ac3d5268d63deb608b4bef4d239b6f85d80a103e56807",
        "logIndex": "0x19",
        "removed": false
      }
    ],
    "blockNumber": "0xe50026",
    "cumulativeGasUsed": "0x1a45d3",
    "status": "0x1"
  },
  "blockNumber": "0xe50026",
  "args": [
    "0x5F2080542ab6ae7e0b06778F0B2d263006297840",
    "0x401afFBFAE54260E51da27462e51b27524eaBa4A"
  ],
  "numDeployments": 1,
  "solcInputHash": "10e9466ddb0ed43aa88e88ae2f75d603",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract GovernanceToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_token\":\"Governance token.\",\"governor\":\"Governor.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlock(address,uint256)\":{\"params\":{\"amount\":\"Amount token.\",\"recipient\":\"Recipient address.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"token()\":{\"notice\":\"Governance token.\"},\"unlock(address,uint256)\":{\"notice\":\"Unlock tokens and transfer to recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Delegator.sol\":\"Delegator\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/governance/Delegator.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./GovernanceToken.sol\\\";\\n\\ncontract Delegator is Ownable {\\n  /// @notice Governance token.\\n  GovernanceToken public token;\\n\\n  /**\\n   * @param _token Governance token.\\n   * @param governor Governor.\\n   */\\n  constructor(address _token, address governor) {\\n    require(governor != address(0), \\\"Delegator::constructor: cannot delegate to the zero address\\\");\\n    token = GovernanceToken(_token);\\n    token.delegate(governor);\\n  }\\n\\n  /**\\n   * @notice Unlock tokens and transfer to recipient.\\n   * @param recipient Recipient address.\\n   * @param amount Amount token.\\n   */\\n  function unlock(address recipient, uint256 amount) external onlyOwner {\\n    require(recipient != address(0), \\\"Delegator::unlock: cannot transfer to the zero address\\\");\\n    token.transfer(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0x337571286c432987352b6b9e742707162ddc50e133b2409ba32f07541abaea53\",\"license\":\"BSD-3-Clause\"},\"contracts/governance/GovernanceToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable private-vars-leading-underscore\\ncontract GovernanceToken is Ownable {\\n  /// @notice EIP-20 token name for this token\\n  string public constant name = \\\"DeFiHelper Governance Token\\\";\\n\\n  /// @notice EIP-20 token symbol for this token\\n  string public constant symbol = \\\"DFH\\\";\\n\\n  /// @notice EIP-20 token decimals for this token\\n  uint8 public constant decimals = 18;\\n\\n  /// @notice Total number of tokens in circulation\\n  uint256 public totalSupply = 1_000_000_000e18; // 1 billion GovernanceToken\\n\\n  /// @notice Allowance amounts on behalf of others\\n  mapping(address => mapping(address => uint96)) internal allowances;\\n\\n  /// @notice Official record of token balances for each account\\n  mapping(address => uint96) internal balances;\\n\\n  /// @notice A record of each accounts delegate\\n  mapping(address => address) public delegates;\\n\\n  /// @notice A checkpoint for marking number of votes from a given block\\n  struct Checkpoint {\\n    uint32 fromBlock;\\n    uint96 votes;\\n  }\\n\\n  /// @notice A record of votes checkpoints for each account, by index\\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n  /// @notice The number of checkpoints for each account\\n  mapping(address => uint32) public numCheckpoints;\\n\\n  /// @notice The EIP-712 typehash for the contract's domain\\n  bytes32 public constant DOMAIN_TYPEHASH =\\n    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n\\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n  /// @notice A record of states for signing / validating signatures\\n  mapping(address => uint256) public nonces;\\n\\n  /// @notice An event thats emitted when an account changes its delegate\\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n  /// @notice An event thats emitted when a delegate account's vote balance changes\\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n  /// @notice The standard EIP-20 transfer event\\n  event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n  /// @notice The standard EIP-20 approval event\\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n  /**\\n   * @notice Construct a new GovernanceToken token\\n   * @param account The initial account to grant all the tokens\\n   */\\n  constructor(address account) {\\n    balances[account] = uint96(totalSupply);\\n    emit Transfer(address(0), account, totalSupply);\\n  }\\n\\n  /**\\n   * @notice Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * @param account Recipient of created token.\\n   * @param amount Amount of token to be created.\\n   */\\n  function mint(address account, uint256 amount) public onlyOwner {\\n    _mint(account, amount);\\n  }\\n\\n  /**\\n   * @param account Owner of removed token.\\n   * @param amount Amount of token to be removed.\\n   */\\n  function burn(address account, uint256 amount) public onlyOwner {\\n    _burn(account, amount);\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\\n   * @param account The address of the account holding the funds\\n   * @param spender The address of the account spending the funds\\n   * @return The number of tokens approved\\n   */\\n  function allowance(address account, address spender) external view returns (uint256) {\\n    return allowances[account][spender];\\n  }\\n\\n  /**\\n   * @notice Approve `spender` to transfer up to `amount` from `src`\\n   * @dev This will overwrite the approval amount for `spender`\\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n   * @param spender The address of the account which may transfer tokens\\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n   * @return Whether or not the approval succeeded\\n   */\\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\\n    uint96 amount;\\n    if (rawAmount == 2**256 - 1) {\\n      amount = 2**96 - 1;\\n    } else {\\n      amount = safe96(rawAmount, \\\"GovernanceToken::approve: amount exceeds 96 bits\\\");\\n    }\\n\\n    allowances[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Get the number of tokens held by the `account`\\n   * @param account The address of the account to get the balance of\\n   * @return The number of tokens held\\n   */\\n  function balanceOf(address account) external view returns (uint256) {\\n    return balances[account];\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::transfer: amount exceeds 96 bits\\\");\\n    _transferTokens(msg.sender, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Transfer `amount` tokens from `src` to `dst`\\n   * @param src The address of the source account\\n   * @param dst The address of the destination account\\n   * @param rawAmount The number of tokens to transfer\\n   * @return Whether or not the transfer succeeded\\n   */\\n  function transferFrom(\\n    address src,\\n    address dst,\\n    uint256 rawAmount\\n  ) external returns (bool) {\\n    address spender = msg.sender;\\n    uint96 spenderAllowance = allowances[src][spender];\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::approve: amount exceeds 96 bits\\\");\\n\\n    if (spender != src && spenderAllowance != 2**96 - 1) {\\n      uint96 newAllowance = sub96(\\n        spenderAllowance,\\n        amount,\\n        \\\"GovernanceToken::transferFrom: transfer amount exceeds spender allowance\\\"\\n      );\\n      allowances[src][spender] = newAllowance;\\n\\n      emit Approval(src, spender, newAllowance);\\n    }\\n\\n    _transferTokens(src, dst, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @notice Delegate votes from `msg.sender` to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   */\\n  function delegate(address delegatee) public {\\n    return _delegate(msg.sender, delegatee);\\n  }\\n\\n  /**\\n   * @notice Delegates votes from signatory to `delegatee`\\n   * @param delegatee The address to delegate votes to\\n   * @param nonce The contract state required to match the signature\\n   * @param expiry The time at which to expire the signature\\n   * @param v The recovery byte of the signature\\n   * @param r Half of the ECDSA signature pair\\n   * @param s Half of the ECDSA signature pair\\n   */\\n  function delegateBySig(\\n    address delegatee,\\n    uint256 nonce,\\n    uint256 expiry,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) public {\\n    bytes32 domainSeparator = keccak256(\\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\\n    );\\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n    bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    address signatory = ecrecover(digest, v, r, s);\\n    require(signatory != address(0), \\\"GovernanceToken::delegateBySig: invalid signature\\\");\\n    require(nonce == nonces[signatory]++, \\\"GovernanceToken::delegateBySig: invalid nonce\\\");\\n    // solhint-disable-next-line not-rely-on-time\\n    require(block.timestamp <= expiry, \\\"GovernanceToken::delegateBySig: signature expired\\\");\\n    return _delegate(signatory, delegatee);\\n  }\\n\\n  /**\\n   * @notice Gets the current votes balance for `account`\\n   * @param account The address to get votes balance\\n   * @return The number of current votes for `account`\\n   */\\n  function getCurrentVotes(address account) external view returns (uint96) {\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n  }\\n\\n  /**\\n   * @notice Determine the prior number of votes for an account as of a block number\\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n   * @param account The address of the account to check\\n   * @param blockNumber The block number to get the vote balance at\\n   * @return The number of votes the account had as of the given block\\n   */\\n  function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\\n    require(blockNumber < block.number, \\\"GovernanceToken::getPriorVotes: not yet determined\\\");\\n\\n    uint32 nCheckpoints = numCheckpoints[account];\\n    if (nCheckpoints == 0) {\\n      return 0;\\n    }\\n\\n    // First check most recent balance\\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n      return checkpoints[account][nCheckpoints - 1].votes;\\n    }\\n\\n    // Next check implicit zero balance\\n    if (checkpoints[account][0].fromBlock > blockNumber) {\\n      return 0;\\n    }\\n\\n    uint32 lower = 0;\\n    uint32 upper = nCheckpoints - 1;\\n    while (upper > lower) {\\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n      Checkpoint memory cp = checkpoints[account][center];\\n      if (cp.fromBlock == blockNumber) {\\n        return cp.votes;\\n      } else if (cp.fromBlock < blockNumber) {\\n        lower = center;\\n      } else {\\n        upper = center - 1;\\n      }\\n    }\\n    return checkpoints[account][lower].votes;\\n  }\\n\\n  function _delegate(address delegator, address delegatee) internal {\\n    address currentDelegate = delegates[delegator];\\n    uint96 delegatorBalance = balances[delegator];\\n    delegates[delegator] = delegatee;\\n\\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n  }\\n\\n  function _transferTokens(\\n    address src,\\n    address dst,\\n    uint96 amount\\n  ) internal {\\n    require(src != address(0), \\\"GovernanceToken::_transferTokens: cannot transfer from the zero address\\\");\\n    require(dst != address(0), \\\"GovernanceToken::_transferTokens: cannot transfer to the zero address\\\");\\n\\n    balances[src] = sub96(balances[src], amount, \\\"GovernanceToken::_transferTokens: transfer amount exceeds balance\\\");\\n    balances[dst] = add96(balances[dst], amount, \\\"GovernanceToken::_transferTokens: transfer amount overflows\\\");\\n    emit Transfer(src, dst, amount);\\n\\n    _moveDelegates(delegates[src], delegates[dst], amount);\\n  }\\n\\n  function _moveDelegates(\\n    address srcRep,\\n    address dstRep,\\n    uint96 amount\\n  ) internal {\\n    if (srcRep != dstRep && amount > 0) {\\n      if (srcRep != address(0)) {\\n        uint32 srcRepNum = numCheckpoints[srcRep];\\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n        uint96 srcRepNew = sub96(srcRepOld, amount, \\\"GovernanceToken::_moveVotes: vote amount underflows\\\");\\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n      }\\n\\n      if (dstRep != address(0)) {\\n        uint32 dstRepNum = numCheckpoints[dstRep];\\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n        uint96 dstRepNew = add96(dstRepOld, amount, \\\"GovernanceToken::_moveVotes: vote amount overflows\\\");\\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n      }\\n    }\\n  }\\n\\n  function _writeCheckpoint(\\n    address delegatee,\\n    uint32 nCheckpoints,\\n    uint96 oldVotes,\\n    uint96 newVotes\\n  ) internal {\\n    uint32 blockNumber = safe32(block.number, \\\"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\\\");\\n\\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n    } else {\\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n      numCheckpoints[delegatee] = nCheckpoints + 1;\\n    }\\n\\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n  function _mint(address account, uint256 rawAmount) internal virtual {\\n    require(account != address(0), \\\"GovernanceToken::_mint: mint to the zero address\\\");\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::_mint: amount exceeds 96 bits\\\");\\n\\n    totalSupply += amount;\\n    balances[account] = add96(balances[account], amount, \\\"GovernanceToken::_mint: mint amount overflows\\\");\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 rawAmount) internal virtual {\\n    require(account != address(0), \\\"GovernanceToken::_burn: burn from the zero address\\\");\\n    uint96 amount = safe96(rawAmount, \\\"GovernanceToken::_burn: amount exceeds 96 bits\\\");\\n\\n    balances[account] = sub96(balances[account], amount, \\\"GovernanceToken::_burn: burn amount exceeds balance\\\");\\n    totalSupply -= amount;\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n    require(n < 2**32, errorMessage);\\n    return uint32(n);\\n  }\\n\\n  function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n    require(n < 2**96, errorMessage);\\n    return uint96(n);\\n  }\\n\\n  function add96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    uint96 c = a + b;\\n    require(c >= a, errorMessage);\\n    return c;\\n  }\\n\\n  function sub96(\\n    uint96 a,\\n    uint96 b,\\n    string memory errorMessage\\n  ) internal pure returns (uint96) {\\n    require(b <= a, errorMessage);\\n    return a - b;\\n  }\\n\\n  function getChainId() internal view returns (uint256) {\\n    uint256 chainId;\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n      chainId := chainid()\\n    }\\n    return chainId;\\n  }\\n}\\n\",\"keccak256\":\"0x046e4fd10e047b14f6294bdfdb33a7bc7968acb5818c953f2d66bb4d3561ede0\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516105ee3803806105ee83398101604081905261002f9161019b565b6100383361012f565b6001600160a01b0381166100b85760405162461bcd60e51b815260206004820152603b60248201527f44656c656761746f723a3a636f6e7374727563746f723a2063616e6e6f74206460448201527f656c656761746520746f20746865207a65726f20616464726573730000000000606482015260840160405180910390fd5b600180546001600160a01b0319166001600160a01b038481169182179092556040516317066a5760e21b8152918316600483015290635c19a95c90602401600060405180830381600087803b15801561011057600080fd5b505af1158015610124573d6000803e3d6000fd5b5050505050506101ce565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b038116811461019657600080fd5b919050565b600080604083850312156101ae57600080fd5b6101b78361017f565b91506101c56020840161017f565b90509250929050565b610411806101dd6000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637eee288d146100665780638da5cb5b14610079578063f2fde38b146100a2578063fc0c546a146100b5575b600080fd5b6100646100c8565b005b61006461007436600461035a565b610107565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6100646100b0366004610338565b610231565b600154610086906001600160a01b031681565b6000546001600160a01b031633146100fb5760405162461bcd60e51b81526004016100f2906103a6565b60405180910390fd5b61010560006102cc565b565b6000546001600160a01b031633146101315760405162461bcd60e51b81526004016100f2906103a6565b6001600160a01b0382166101a65760405162461bcd60e51b815260206004820152603660248201527f44656c656761746f723a3a756e6c6f636b3a2063616e6e6f74207472616e7366604482015275657220746f20746865207a65726f206164647265737360501b60648201526084016100f2565b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156101f457600080fd5b505af1158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c9190610384565b505050565b6000546001600160a01b0316331461025b5760405162461bcd60e51b81526004016100f2906103a6565b6001600160a01b0381166102c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f2565b6102c9816102cc565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461033357600080fd5b919050565b60006020828403121561034a57600080fd5b6103538261031c565b9392505050565b6000806040838503121561036d57600080fd5b6103768361031c565b946020939093013593505050565b60006020828403121561039657600080fd5b8151801515811461035357600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122092a09f68201de402c1d4f841922615859ddab638dcb09dba20bb8810fd88e4fa64736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637eee288d146100665780638da5cb5b14610079578063f2fde38b146100a2578063fc0c546a146100b5575b600080fd5b6100646100c8565b005b61006461007436600461035a565b610107565b6000546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6100646100b0366004610338565b610231565b600154610086906001600160a01b031681565b6000546001600160a01b031633146100fb5760405162461bcd60e51b81526004016100f2906103a6565b60405180910390fd5b61010560006102cc565b565b6000546001600160a01b031633146101315760405162461bcd60e51b81526004016100f2906103a6565b6001600160a01b0382166101a65760405162461bcd60e51b815260206004820152603660248201527f44656c656761746f723a3a756e6c6f636b3a2063616e6e6f74207472616e7366604482015275657220746f20746865207a65726f206164647265737360501b60648201526084016100f2565b60015460405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b1580156101f457600080fd5b505af1158015610208573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022c9190610384565b505050565b6000546001600160a01b0316331461025b5760405162461bcd60e51b81526004016100f2906103a6565b6001600160a01b0381166102c05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100f2565b6102c9816102cc565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b038116811461033357600080fd5b919050565b60006020828403121561034a57600080fd5b6103538261031c565b9392505050565b6000806040838503121561036d57600080fd5b6103768361031c565b946020939093013593505050565b60006020828403121561039657600080fd5b8151801515811461035357600080fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260408201526060019056fea264697066735822122092a09f68201de402c1d4f841922615859ddab638dcb09dba20bb8810fd88e4fa64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_token": "Governance token.",
          "governor": "Governor."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlock(address,uint256)": {
        "params": {
          "amount": "Amount token.",
          "recipient": "Recipient address."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "token()": {
        "notice": "Governance token."
      },
      "unlock(address,uint256)": {
        "notice": "Unlock tokens and transfer to recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/governance/Delegator.sol:Delegator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5477,
        "contract": "contracts/governance/Delegator.sol:Delegator",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(GovernanceToken)6674"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(GovernanceToken)6674": {
        "encoding": "inplace",
        "label": "contract GovernanceToken",
        "numberOfBytes": "20"
      }
    }
  }
}
