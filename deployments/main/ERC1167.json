{
  "name": "ERC1167",
  "address": "0x7ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D",
  "abi": [
    {
      "inputs": [],
      "name": "CLONE",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proxy",
          "type": "address"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "impl",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf88218d839ad350bdb1657580d91b5395351e1c569ff2de6a39b432fe4f12bef",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0x7ecFCbdeb6f195030B9Bf2ECc402f6d5433d116D",
    "transactionIndex": 53,
    "gasUsed": "371834",
    "logsBloom": "0x
    "blockHash": "0x6dbbfaaff116f4801448b38aa87484b31d74f3870f54e54940253ec49518a901",
    "transactionHash": "0xf88218d839ad350bdb1657580d91b5395351e1c569ff2de6a39b432fe4f12bef",
    "logs": [],
    "blockNumber": 13568682,
    "cumulativeGasUsed": "3779968",
    "status": 1,
    "byzantium": true
  },
  "blockNumber": 13568682,
  "args": [],
  "solcInputHash": "12fb6e7df0f49d959f0d90672680f947",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CLONE\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proxy\",\"type\":\"address\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"impl\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"clone(address)\":{\"params\":{\"impl\":\"Address prototype contract.\"},\"returns\":{\"proxy\":\"Address new proxy contract.\"}},\"implementation(address)\":{\"params\":{\"proxy\":\"Address proxy contract.\"},\"returns\":{\"impl\":\"Address prototype contract (current contract address if not proxy).\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"clone(address)\":{\"notice\":\"Make new proxy contract.\"},\"implementation(address)\":{\"notice\":\"Returns address of prototype contract for proxy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/proxy/ERC1167.sol\":\"ERC1167\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/proxy/ERC1167.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\n// solhint-disable no-inline-assembly\\nlibrary ERC1167 {\\n  bytes public constant CLONE =\\n    hex\\\"363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3\\\";\\n\\n  /**\\n   * @notice Make new proxy contract.\\n   * @param impl Address prototype contract.\\n   * @return proxy Address new proxy contract.\\n   */\\n  function clone(address impl) external returns (address proxy) {\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n      mstore(add(ptr, 0x14), shl(0x60, impl))\\n      mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n      proxy := create(0, ptr, 0x37)\\n    }\\n    require(proxy != address(0), \\\"ERC1167: create failed\\\");\\n  }\\n\\n  /**\\n   * @notice Returns address of prototype contract for proxy.\\n   * @param proxy Address proxy contract.\\n   * @return impl Address prototype contract (current contract address if not proxy).\\n   */\\n  function implementation(address proxy) external view returns (address impl) {\\n    uint256 size;\\n    assembly {\\n      size := extcodesize(proxy)\\n    }\\n\\n    impl = proxy;\\n    if (size <= 45 && size >= 41) {\\n      bool matches = true;\\n      uint256 i;\\n\\n      bytes memory code;\\n      assembly {\\n        code := mload(0x40)\\n        mstore(0x40, add(code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        mstore(code, size)\\n        extcodecopy(proxy, add(code, 0x20), 0, size)\\n      }\\n      for (i = 0; matches && i < 9; i++) {\\n        matches = code[i] == CLONE[i];\\n      }\\n      for (i = 0; matches && i < 15; i++) {\\n        if (i == 4) {\\n          matches = code[code.length - i - 1] == bytes1(uint8(CLONE[45 - i - 1]) - uint8(45 - size));\\n        } else {\\n          matches = code[code.length - i - 1] == CLONE[45 - i - 1];\\n        }\\n      }\\n      if (code[9] != bytes1(0x73 - uint8(45 - size))) {\\n        matches = false;\\n      }\\n      uint256 forwardedToBuffer;\\n      if (matches) {\\n        assembly {\\n          forwardedToBuffer := mload(add(code, 30))\\n        }\\n        forwardedToBuffer &= (0x1 << (20 * 8)) - 1;\\n        impl = address(uint160(forwardedToBuffer >> ((45 - size) * 8)));\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x766f43e1832068a2a230f9bc19db0b190f638c4b0acb2dc689da07d43a45675f\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x6105c261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80636b424266146100505780636b8807181461006e5780638124b78e14610099575b600080fd5b6100586100b9565b604051610065919061046a565b60405180910390f35b61008161007c36600461043a565b6100d5565b6040516001600160a01b039091168152602001610065565b8180156100a557600080fd5b506100816100b436600461043a565b610399565b6040518060600160405280602d8152602001610560602d913981565b80803b602d81118015906100ea575060298110155b156103935760408051603f8301601f19168101909152818152600190600090838260208301883c600091505b8280156101235750600982105b1561019d576040518060600160405280602d8152602001610560602d9139828151811061015257610152610549565b602001015160f81c60f81b6001600160f81b03191681838151811061017957610179610549565b01602001516001600160f81b0319161492508161019581610518565b925050610116565b600091505b8280156101af5750600f82105b1561030c578160041415610268576101c884602d6104de565b6040518060600160405280602d8152602001610560602d913960016101ee85602d6104de565b6101f891906104de565b8151811061020857610208610549565b016020015161021a919060f81c6104f5565b60f81b6001600160f81b03191681600184845161023791906104de565b61024191906104de565b8151811061025157610251610549565b01602001516001600160f81b0319161492506102fa565b6040518060600160405280602d8152602001610560602d9139600161028e84602d6104de565b61029891906104de565b815181106102a8576102a8610549565b602001015160f81c60f81b6001600160f81b0319168160018484516102cd91906104de565b6102d791906104de565b815181106102e7576102e7610549565b01602001516001600160f81b0319161492505b8161030481610518565b9250506101a2565b61031784602d6104de565b6103229060736104f5565b60f81b6001600160f81b0319168160098151811061034257610342610549565b01602001516001600160f81b0319161461035b57600092505b6000831561038e5750601e8101516001600160a01b031661037d85602d6104de565b6103889060086104bf565b81901c95505b505050505b50919050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166104355760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b60006020828403121561044c57600080fd5b81356001600160a01b038116811461046357600080fd5b9392505050565b600060208083528351808285015260005b818110156104975785810183015185820160400152820161047b565b818111156104a9576000604083870101525b50601f01601f1916929092016040019392505050565b60008160001904831182151516156104d9576104d9610533565b500290565b6000828210156104f0576104f0610533565b500390565b600060ff821660ff84168082101561050f5761050f610533565b90039392505050565b600060001982141561052c5761052c610533565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3a2646970667358221220d35871a8d77be07b304c4c82193185468640c652ac245dc5f593b944c39609eb64736f6c63430008060033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361061004b5760003560e01c80636b424266146100505780636b8807181461006e5780638124b78e14610099575b600080fd5b6100586100b9565b604051610065919061046a565b60405180910390f35b61008161007c36600461043a565b6100d5565b6040516001600160a01b039091168152602001610065565b8180156100a557600080fd5b506100816100b436600461043a565b610399565b6040518060600160405280602d8152602001610560602d913981565b80803b602d81118015906100ea575060298110155b156103935760408051603f8301601f19168101909152818152600190600090838260208301883c600091505b8280156101235750600982105b1561019d576040518060600160405280602d8152602001610560602d9139828151811061015257610152610549565b602001015160f81c60f81b6001600160f81b03191681838151811061017957610179610549565b01602001516001600160f81b0319161492508161019581610518565b925050610116565b600091505b8280156101af5750600f82105b1561030c578160041415610268576101c884602d6104de565b6040518060600160405280602d8152602001610560602d913960016101ee85602d6104de565b6101f891906104de565b8151811061020857610208610549565b016020015161021a919060f81c6104f5565b60f81b6001600160f81b03191681600184845161023791906104de565b61024191906104de565b8151811061025157610251610549565b01602001516001600160f81b0319161492506102fa565b6040518060600160405280602d8152602001610560602d9139600161028e84602d6104de565b61029891906104de565b815181106102a8576102a8610549565b602001015160f81c60f81b6001600160f81b0319168160018484516102cd91906104de565b6102d791906104de565b815181106102e7576102e7610549565b01602001516001600160f81b0319161492505b8161030481610518565b9250506101a2565b61031784602d6104de565b6103229060736104f5565b60f81b6001600160f81b0319168160098151811061034257610342610549565b01602001516001600160f81b0319161461035b57600092505b6000831561038e5750601e8101516001600160a01b031661037d85602d6104de565b6103889060086104bf565b81901c95505b505050505b50919050565b6000604051733d602d80600a3d3981f3363d3d373d3d3d363d7360601b81528260601b60148201526e5af43d82803e903d91602b57fd5bf360881b60288201526037816000f09150506001600160a01b0381166104355760405162461bcd60e51b8152602060048201526016602482015275115490cc4c4d8dce8818dc99585d194819985a5b195960521b604482015260640160405180910390fd5b919050565b60006020828403121561044c57600080fd5b81356001600160a01b038116811461046357600080fd5b9392505050565b600060208083528351808285015260005b818110156104975785810183015185820160400152820161047b565b818111156104a9576000604083870101525b50601f01601f1916929092016040019392505050565b60008160001904831182151516156104d9576104d9610533565b500290565b6000828210156104f0576104f0610533565b500390565b600060ff821660ff84168082101561050f5761050f610533565b90039392505050565b600060001982141561052c5761052c610533565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fdfe363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3a2646970667358221220d35871a8d77be07b304c4c82193185468640c652ac245dc5f593b944c39609eb64736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "clone(address)": {
        "params": {
          "impl": "Address prototype contract."
        },
        "returns": {
          "proxy": "Address new proxy contract."
        }
      },
      "implementation(address)": {
        "params": {
          "proxy": "Address proxy contract."
        },
        "returns": {
          "impl": "Address prototype contract (current contract address if not proxy)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "clone(address)": {
        "notice": "Make new proxy contract."
      },
      "implementation(address)": {
        "notice": "Returns address of prototype contract for proxy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
