{
  "name": "Store",
  "address": "0x040ccf6CA8CCFEd2eA741F1Dd76245314946f078",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_balance",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "product",
          "type": "uint8"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "Buy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "product",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "priceUSD",
          "type": "uint256"
        }
      ],
      "name": "ProductChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "contract Balance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "product",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "priceMax",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "changePriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "id",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "priceUSD",
          "type": "uint256"
        }
      ],
      "name": "changeProduct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "product",
          "type": "uint8"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x82e90ffec0bc2ce02658eadc64cec8a6d7f79557f1af71afae6d3f08854a9c48",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0x040ccf6CA8CCFEd2eA741F1Dd76245314946f078",
    "transactionIndex": 18,
    "gasUsed": "756744",
    "logsBloom": "0x
    "blockHash": "0xd2fa6a7f91a3fcdfa848c4caa4b2e6577564fdc287f3f2b413ab75c7d59fbb6a",
    "transactionHash": "0x82e90ffec0bc2ce02658eadc64cec8a6d7f79557f1af71afae6d3f08854a9c48",
    "logs": [
      {
        "transactionIndex": 18,
        "blockNumber": 6885326,
        "transactionHash": "0x82e90ffec0bc2ce02658eadc64cec8a6d7f79557f1af71afae6d3f08854a9c48",
        "address": "0x040ccf6CA8CCFEd2eA741F1Dd76245314946f078",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bb73463b88b0cb9681f176d6d43a12c2fea2c237"
        ],
        "data": "0x",
        "logIndex": 89,
        "blockHash": "0xd2fa6a7f91a3fcdfa848c4caa4b2e6577564fdc287f3f2b413ab75c7d59fbb6a"
      }
    ],
    "blockNumber": 6885326,
    "cumulativeGasUsed": "3501239",
    "status": 1,
    "byzantium": true
  },
  "blockNumber": 6885326,
  "args": [
    "0x1E46B649d6651b3892217Dd1EFd2a3e78f4D904B",
    "0x0A77230d17318075983913bC2145DB16C7366156"
  ],
  "solcInputHash": "bd095c44d81e51c4959fcae1aa8a4e30",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"product\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Buy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"product\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"}],\"name\":\"ProductChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"contract Balance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"product\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"priceMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buy\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"changePriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"id\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"priceUSD\",\"type\":\"uint256\"}],\"name\":\"changeProduct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"product\",\"type\":\"uint8\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"products\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buy(uint8,address,uint256,uint256)\":{\"params\":{\"deadline\":\"Timestamp of deadline.\",\"priceMax\":\"Maximum price.\",\"product\":\"Target product.\",\"recipient\":\"Product recipient.\"}},\"changePriceFeed(address)\":{\"params\":{\"_priceFeed\":\"New price feed oracle address.\"}},\"changeProduct(uint8,uint256)\":{\"params\":{\"id\":\"Product identificator.\",\"priceUSD\":\"Product price in USD with price feed oracle decimals (zero if product is not for sale).\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"price(uint8)\":{\"params\":{\"product\":\"Target product.\"},\"returns\":{\"_0\":\"Product price in ETH.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balance()\":{\"notice\":\"Balance contract address.\"},\"buy(uint8,address,uint256,uint256)\":{\"notice\":\"Buy product.\"},\"changePriceFeed(address)\":{\"notice\":\"Change price feed oracle address.\"},\"changeProduct(uint8,uint256)\":{\"notice\":\"Update product price.\"},\"price(uint8)\":{\"notice\":\"Get current product price.\"},\"priceFeed()\":{\"notice\":\"Price feed oracle.\"},\"products(uint8)\":{\"notice\":\"Products.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Store.sol\":\"Store\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Balance.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract Balance is Ownable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @notice Maximum inspector count.\\n  uint256 public constant MAXIMUM_INSPECTOR_COUNT = 100;\\n\\n  /// @notice Maximum consumer count.\\n  uint256 public constant MAXIMUM_CONSUMER_COUNT = 100;\\n\\n  /// @notice Maximum accept or reject claims by one call.\\n  uint256 public constant MAXIMUM_CLAIM_PACKAGE = 500;\\n\\n  /// @notice Treasury contract\\n  address payable public treasury;\\n\\n  /// @dev Inspectors list.\\n  EnumerableSet.AddressSet internal _inspectors;\\n\\n  /// @dev Consumers list.\\n  EnumerableSet.AddressSet internal _consumers;\\n\\n  /// @notice Account balance.\\n  mapping(address => uint256) public balanceOf;\\n\\n  /// @notice Account claim.\\n  mapping(address => uint256) public claimOf;\\n\\n  /// @notice Possible statuses that a bill may be in.\\n  enum BillStatus {\\n    Pending,\\n    Accepted,\\n    Rejected\\n  }\\n\\n  struct Bill {\\n    // Identificator.\\n    uint256 id;\\n    // Claimant.\\n    address claimant;\\n    // Target account.\\n    address account;\\n    // Claim gas fee.\\n    uint256 gasFee;\\n    // Claim protocol fee.\\n    uint256 protocolFee;\\n    // Current bill status.\\n    BillStatus status;\\n  }\\n\\n  /// @notice Bills.\\n  mapping(uint256 => Bill) public bills;\\n\\n  /// @notice Bill count.\\n  uint256 public billCount;\\n\\n  event TreasuryChanged(address indexed treasury);\\n\\n  event InspectorAdded(address indexed inspector);\\n\\n  event InspectorRemoved(address indexed inspector);\\n\\n  event ConsumerAdded(address indexed consumer);\\n\\n  event ConsumerRemoved(address indexed consumer);\\n\\n  event Deposit(address indexed recipient, uint256 amount);\\n\\n  event Refund(address indexed recipient, uint256 amount);\\n\\n  event Claim(address indexed account, uint256 indexed bill, string description);\\n\\n  event AcceptClaim(uint256 indexed bill);\\n\\n  event RejectClaim(uint256 indexed bill);\\n\\n  constructor(address payable _treasury) {\\n    treasury = _treasury;\\n  }\\n\\n  modifier onlyInspector() {\\n    require(_inspectors.contains(_msgSender()), \\\"Balance: caller is not the inspector\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @notice Change treasury contract address.\\n   * @param _treasury New treasury contract address.\\n   */\\n  function changeTreasury(address payable _treasury) external onlyOwner {\\n    treasury = _treasury;\\n    emit TreasuryChanged(treasury);\\n  }\\n\\n  /**\\n   * @notice Add inspector.\\n   * @param inspector Added inspector.\\n   */\\n  function addInspector(address inspector) external onlyOwner {\\n    require(!_inspectors.contains(inspector), \\\"Balance::addInspector: inspector already added\\\");\\n    require(\\n      _inspectors.length() < MAXIMUM_INSPECTOR_COUNT,\\n      \\\"Balance::addInspector: inspector must not exceed maximum count\\\"\\n    );\\n\\n    _inspectors.add(inspector);\\n\\n    emit InspectorAdded(inspector);\\n  }\\n\\n  /**\\n   * @notice Remove inspector.\\n   * @param inspector Removed inspector.\\n   */\\n  function removeInspector(address inspector) external onlyOwner {\\n    require(_inspectors.contains(inspector), \\\"Balance::removeInspector: inspector already removed\\\");\\n\\n    _inspectors.remove(inspector);\\n\\n    emit InspectorRemoved(inspector);\\n  }\\n\\n  /**\\n   * @notice Get all inspectors.\\n   * @return All inspectors addresses.\\n   */\\n  function inspectors() external view returns (address[] memory) {\\n    address[] memory result = new address[](_inspectors.length());\\n\\n    for (uint256 i = 0; i < _inspectors.length(); i++) {\\n      result[i] = _inspectors.at(i);\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Add consumer.\\n   * @param consumer Added consumer.\\n   */\\n  function addConsumer(address consumer) external onlyOwner {\\n    require(!_consumers.contains(consumer), \\\"Balance::addConsumer: consumer already added\\\");\\n    require(\\n      _consumers.length() < MAXIMUM_CONSUMER_COUNT,\\n      \\\"Balance::addConsumer: consumer must not exceed maximum count\\\"\\n    );\\n\\n    _consumers.add(consumer);\\n\\n    emit ConsumerAdded(consumer);\\n  }\\n\\n  /**\\n   * @notice Remove consumer.\\n   * @param consumer Removed consumer.\\n   */\\n  function removeConsumer(address consumer) external onlyOwner {\\n    require(_consumers.contains(consumer), \\\"Balance::removeConsumer: consumer already removed\\\");\\n\\n    _consumers.remove(consumer);\\n\\n    emit ConsumerRemoved(consumer);\\n  }\\n\\n  /**\\n   * @notice Get all consumers.\\n   * @return All consumers addresses.\\n   */\\n  function consumers() external view returns (address[] memory) {\\n    address[] memory result = new address[](_consumers.length());\\n\\n    for (uint256 i = 0; i < _consumers.length(); i++) {\\n      result[i] = _consumers.at(i);\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Get net balance of account.\\n   * @param account Target account.\\n   * @return Net balance (balance minus claim).\\n   */\\n  function netBalanceOf(address account) public view returns (uint256) {\\n    return balanceOf[account] - claimOf[account];\\n  }\\n\\n  /**\\n   * @notice Deposit ETH to balance.\\n   * @param recipient Target recipient.\\n   */\\n  function deposit(address recipient) external payable {\\n    require(recipient != address(0), \\\"Balance::deposit: invalid recipient\\\");\\n    require(msg.value > 0, \\\"Balance::deposit: negative or zero deposit\\\");\\n\\n    balanceOf[recipient] += msg.value;\\n\\n    emit Deposit(recipient, msg.value);\\n  }\\n\\n  /**\\n   * @notice Refund ETH from balance.\\n   * @param amount Refunded amount.\\n   */\\n  function refund(uint256 amount) external {\\n    address payable recipient = payable(_msgSender());\\n    require(amount > 0, \\\"Balance::refund: negative or zero refund\\\");\\n    require(amount <= netBalanceOf(recipient), \\\"Balance::refund: refund amount exceeds net balance\\\");\\n\\n    balanceOf[recipient] -= amount;\\n    recipient.transfer(amount);\\n\\n    emit Refund(recipient, amount);\\n  }\\n\\n  /**\\n   * @notice Send claim.\\n   * @param account Target account.\\n   * @param gasFee Claim gas fee.\\n   * @param protocolFee Claim protocol fee.\\n   * @param description Claim description.\\n   */\\n  function claim(\\n    address account,\\n    uint256 gasFee,\\n    uint256 protocolFee,\\n    string memory description\\n  ) external returns (uint256) {\\n    require(\\n      // solhint-disable-next-line avoid-tx-origin\\n      tx.origin == account || _consumers.contains(tx.origin),\\n      \\\"Balance: caller is not a consumer\\\"\\n    );\\n\\n    uint256 amount = gasFee + protocolFee;\\n    require(amount > 0, \\\"Balance::claim: negative or zero claim\\\");\\n    require(amount <= netBalanceOf(account), \\\"Balance::claim: claim amount exceeds net balance\\\");\\n\\n    claimOf[account] += amount;\\n    billCount++;\\n    bills[billCount] = Bill(billCount, _msgSender(), account, gasFee, protocolFee, BillStatus.Pending);\\n    emit Claim(account, billCount, description);\\n\\n    return billCount;\\n  }\\n\\n  /**\\n   * @notice Accept bills package.\\n   * @param _bills Target bills.\\n   * @param gasFees Confirmed claims gas fees by bills.\\n   * @param protocolFees Confirmed claims protocol fees by bills.\\n   */\\n  function acceptClaims(\\n    uint256[] memory _bills,\\n    uint256[] memory gasFees,\\n    uint256[] memory protocolFees\\n  ) external onlyInspector {\\n    require(\\n      _bills.length == gasFees.length && _bills.length == protocolFees.length,\\n      \\\"Balance::acceptClaims: arity mismatch\\\"\\n    );\\n    require(_bills.length <= MAXIMUM_CLAIM_PACKAGE, \\\"Balance::acceptClaims: too many claims\\\");\\n\\n    uint256 transferredAmount;\\n    for (uint256 i = 0; i < _bills.length; i++) {\\n      uint256 billId = _bills[i];\\n      require(billId > 0 && billId <= billCount, \\\"Balance::acceptClaims: bill not found\\\");\\n\\n      uint256 gasFee = gasFees[i];\\n      uint256 protocolFee = protocolFees[i];\\n      uint256 amount = gasFee + protocolFee;\\n\\n      Bill storage bill = bills[billId];\\n      uint256 claimAmount = bill.gasFee + bill.protocolFee;\\n      require(bill.status == BillStatus.Pending, \\\"Balance::acceptClaims: bill already processed\\\");\\n      require(amount <= claimAmount, \\\"Balance::acceptClaims: claim amount exceeds max fee\\\");\\n\\n      bill.status = BillStatus.Accepted;\\n      bill.gasFee = gasFee;\\n      bill.protocolFee = protocolFee;\\n      claimOf[bill.account] -= claimAmount;\\n      balanceOf[bill.account] -= amount;\\n      transferredAmount += amount;\\n\\n      emit AcceptClaim(bill.id);\\n    }\\n    treasury.transfer(transferredAmount);\\n  }\\n\\n  /**\\n   * @notice Reject bills package.\\n   * @param _bills Target bills.\\n   */\\n  function rejectClaims(uint256[] memory _bills) external onlyInspector {\\n    require(_bills.length < MAXIMUM_CLAIM_PACKAGE, \\\"Balance::rejectClaims: too many claims\\\");\\n\\n    for (uint256 i = 0; i < _bills.length; i++) {\\n      uint256 billId = _bills[i];\\n      require(billId > 0 && billId <= billCount, \\\"Balance::rejectClaims: bill not found\\\");\\n\\n      Bill storage bill = bills[billId];\\n      require(bill.status == BillStatus.Pending, \\\"Balance::rejectClaims: bill already processed\\\");\\n      uint256 amount = bill.gasFee + bill.protocolFee;\\n\\n      bill.status = BillStatus.Rejected;\\n      claimOf[bill.account] -= amount;\\n\\n      emit RejectClaim(bill.id);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7993b684521e2e00cc369124fae93fdb7fb46b3fa14207fb79f8cfbc6cd78b24\",\"license\":\"BSD-3-Clause\"},\"contracts/Store.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./Balance.sol\\\";\\n\\ncontract Store is Ownable, Pausable {\\n  /// @notice Balance contract address.\\n  Balance public balance;\\n\\n  /// @notice Price feed oracle.\\n  AggregatorV3Interface public priceFeed;\\n\\n  /// @notice Products.\\n  mapping(uint8 => uint256) public products;\\n\\n  event ProductChanged(uint8 indexed product, uint256 priceUSD);\\n\\n  event PriceFeedChanged(address indexed priceFeed);\\n\\n  event Buy(uint8 indexed product, address indexed recipient);\\n\\n  constructor(address _balance, address _priceFeed) {\\n    balance = Balance(_balance);\\n    priceFeed = AggregatorV3Interface(_priceFeed);\\n  }\\n\\n  /**\\n   * @notice Change price feed oracle address.\\n   * @param _priceFeed New price feed oracle address.\\n   */\\n  function changePriceFeed(address _priceFeed) external onlyOwner {\\n    priceFeed = AggregatorV3Interface(_priceFeed);\\n    emit PriceFeedChanged(_priceFeed);\\n  }\\n\\n  /**\\n   * @notice Update product price.\\n   * @param id Product identificator.\\n   * @param priceUSD Product price in USD with price feed oracle decimals (zero if product is not for sale).\\n   */\\n  function changeProduct(uint8 id, uint256 priceUSD) external onlyOwner {\\n    products[id] = priceUSD;\\n    emit ProductChanged(id, priceUSD);\\n  }\\n\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n\\n  /**\\n   * @notice Get current product price.\\n   * @param product Target product.\\n   * @return Product price in ETH.\\n   */\\n  function price(uint8 product) public view returns (uint256) {\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    require(answer > 0, \\\"Store: invalid price\\\");\\n\\n    return (products[product] * 1e18) / uint256(answer);\\n  }\\n\\n  /**\\n   * @notice Buy product.\\n   * @param product Target product.\\n   * @param recipient Product recipient.\\n   * @param priceMax Maximum price.\\n   * @param deadline Timestamp of deadline.\\n   */\\n  function buy(\\n    uint8 product,\\n    address recipient,\\n    uint256 priceMax,\\n    uint256 deadline\\n  ) external payable whenNotPaused {\\n    // solhint-disable-next-line not-rely-on-time\\n    require(deadline >= block.timestamp, \\\"Store: expired\\\");\\n    uint256 currentPrice = price(product);\\n    require(currentPrice > 0, \\\"Store: negative or zero price\\\");\\n    require(currentPrice <= priceMax, \\\"Store: excessive price\\\");\\n\\n    balance.claim(_msgSender(), 0, currentPrice, \\\"STORE_BUY\\\");\\n    emit Buy(product, recipient);\\n  }\\n}\\n\",\"keccak256\":\"0xc1e59a26f8819bc8ad767bec74feb296d6779ad03d7cfb7cd4a12fc830f76507\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610c8b380380610c8b83398101604081905261002f916100e2565b61003833610076565b6000805460ff60a01b19169055600180546001600160a01b039384166001600160a01b03199182161790915560028054929093169116179055610115565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100dd57600080fd5b919050565b600080604083850312156100f557600080fd5b6100fe836100c6565b915061010c602084016100c6565b90509250929050565b610b67806101246000396000f3fe6080604052600436106100c25760003560e01c80638456cb591161007f578063b7fafcd711610059578063b7fafcd714610208578063cbaf78a714610228578063cbd3df381461023b578063f2fde38b1461025b57600080fd5b80638456cb59146101b55780638da5cb5b146101ca578063b69ef8a8146101e857600080fd5b8063355d2797146100c75780633f4ba83a146101075780635c975abb1461011e5780635f9f353b14610148578063715018a614610168578063741bef1a1461017d575b600080fd5b3480156100d357600080fd5b506100f46100e23660046109d6565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561011357600080fd5b5061011c61027b565b005b34801561012a57600080fd5b50600054600160a01b900460ff1660405190151581526020016100fe565b34801561015457600080fd5b5061011c610163366004610a83565b6102b8565b34801561017457600080fd5b5061011c610335565b34801561018957600080fd5b5060025461019d906001600160a01b031681565b6040516001600160a01b0390911681526020016100fe565b3480156101c157600080fd5b5061011c610369565b3480156101d657600080fd5b506000546001600160a01b031661019d565b3480156101f457600080fd5b5060015461019d906001600160a01b031681565b34801561021457600080fd5b506100f46102233660046109d6565b61039b565b61011c610236366004610a41565b6104a9565b34801561024757600080fd5b5061011c6102563660046109a2565b6106d7565b34801561026757600080fd5b5061011c6102763660046109a2565b61074b565b6000546001600160a01b031633146102ae5760405162461bcd60e51b81526004016102a590610aad565b60405180910390fd5b6102b66107e6565b565b6000546001600160a01b031633146102e25760405162461bcd60e51b81526004016102a590610aad565b60ff821660008181526003602052604090819020839055517f4653d4e03195792cc3ccc156f8b5e7e79d8c9ffb38eddb428012c14502799d69906103299084815260200190565b60405180910390a25050565b6000546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102a590610aad565b6102b66000610883565b6000546001600160a01b031633146103935760405162461bcd60e51b81526004016102a590610aad565b6102b66108d3565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042491906109f1565b505050915050600081136104715760405162461bcd60e51b815260206004820152601460248201527353746f72653a20696e76616c696420707269636560601b60448201526064016102a5565b60ff8316600090815260036020526040902054819061049890670de0b6b3a7640000610b04565b6104a29190610ae2565b9392505050565b600054600160a01b900460ff16156104f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a5565b428110156105375760405162461bcd60e51b815260206004820152600e60248201526d14dd1bdc994e88195e1c1a5c995960921b60448201526064016102a5565b60006105428561039b565b9050600081116105945760405162461bcd60e51b815260206004820152601d60248201527f53746f72653a206e65676174697665206f72207a65726f20707269636500000060448201526064016102a5565b828111156105dd5760405162461bcd60e51b815260206004820152601660248201527553746f72653a2065786365737369766520707269636560501b60448201526064016102a5565b6001546001600160a01b031663e578a225336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152600060248201526044810184905260806064820152600960848201526853544f52455f42555960b81b60a482015260c401602060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069691906109bd565b506040516001600160a01b0385169060ff8716907f2c63ae6df00e90babc5d4997368fce457d90df78673d14a11435b7e4ecc2394090600090a35050505050565b6000546001600160a01b031633146107015760405162461bcd60e51b81526004016102a590610aad565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f70880247142cf113e15f57599afcb48f4cdd196159d882cda54475da68ea996190600090a250565b6000546001600160a01b031633146107755760405162461bcd60e51b81526004016102a590610aad565b6001600160a01b0381166107da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a5565b6107e381610883565b50565b600054600160a01b900460ff166108365760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a5565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156109205760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a5565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108663390565b80356001600160a01b038116811461097257600080fd5b919050565b803560ff8116811461097257600080fd5b805169ffffffffffffffffffff8116811461097257600080fd5b6000602082840312156109b457600080fd5b6104a28261095b565b6000602082840312156109cf57600080fd5b5051919050565b6000602082840312156109e857600080fd5b6104a282610977565b600080600080600060a08688031215610a0957600080fd5b610a1286610988565b9450602086015193506040860151925060608601519150610a3560808701610988565b90509295509295909350565b60008060008060808587031215610a5757600080fd5b610a6085610977565b9350610a6e6020860161095b565b93969395505050506040820135916060013590565b60008060408385031215610a9657600080fd5b610a9f83610977565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082610aff57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b2c57634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220cfc487a36761869265da7f91c6407b03727513fac4510be0dde522655b6c560864736f6c63430008060033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80638456cb591161007f578063b7fafcd711610059578063b7fafcd714610208578063cbaf78a714610228578063cbd3df381461023b578063f2fde38b1461025b57600080fd5b80638456cb59146101b55780638da5cb5b146101ca578063b69ef8a8146101e857600080fd5b8063355d2797146100c75780633f4ba83a146101075780635c975abb1461011e5780635f9f353b14610148578063715018a614610168578063741bef1a1461017d575b600080fd5b3480156100d357600080fd5b506100f46100e23660046109d6565b60036020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561011357600080fd5b5061011c61027b565b005b34801561012a57600080fd5b50600054600160a01b900460ff1660405190151581526020016100fe565b34801561015457600080fd5b5061011c610163366004610a83565b6102b8565b34801561017457600080fd5b5061011c610335565b34801561018957600080fd5b5060025461019d906001600160a01b031681565b6040516001600160a01b0390911681526020016100fe565b3480156101c157600080fd5b5061011c610369565b3480156101d657600080fd5b506000546001600160a01b031661019d565b3480156101f457600080fd5b5060015461019d906001600160a01b031681565b34801561021457600080fd5b506100f46102233660046109d6565b61039b565b61011c610236366004610a41565b6104a9565b34801561024757600080fd5b5061011c6102563660046109a2565b6106d7565b34801561026757600080fd5b5061011c6102763660046109a2565b61074b565b6000546001600160a01b031633146102ae5760405162461bcd60e51b81526004016102a590610aad565b60405180910390fd5b6102b66107e6565b565b6000546001600160a01b031633146102e25760405162461bcd60e51b81526004016102a590610aad565b60ff821660008181526003602052604090819020839055517f4653d4e03195792cc3ccc156f8b5e7e79d8c9ffb38eddb428012c14502799d69906103299084815260200190565b60405180910390a25050565b6000546001600160a01b0316331461035f5760405162461bcd60e51b81526004016102a590610aad565b6102b66000610883565b6000546001600160a01b031633146103935760405162461bcd60e51b81526004016102a590610aad565b6102b66108d3565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156103ec57600080fd5b505afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042491906109f1565b505050915050600081136104715760405162461bcd60e51b815260206004820152601460248201527353746f72653a20696e76616c696420707269636560601b60448201526064016102a5565b60ff8316600090815260036020526040902054819061049890670de0b6b3a7640000610b04565b6104a29190610ae2565b9392505050565b600054600160a01b900460ff16156104f65760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a5565b428110156105375760405162461bcd60e51b815260206004820152600e60248201526d14dd1bdc994e88195e1c1a5c995960921b60448201526064016102a5565b60006105428561039b565b9050600081116105945760405162461bcd60e51b815260206004820152601d60248201527f53746f72653a206e65676174697665206f72207a65726f20707269636500000060448201526064016102a5565b828111156105dd5760405162461bcd60e51b815260206004820152601660248201527553746f72653a2065786365737369766520707269636560501b60448201526064016102a5565b6001546001600160a01b031663e578a225336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152600060248201526044810184905260806064820152600960848201526853544f52455f42555960b81b60a482015260c401602060405180830381600087803b15801561065e57600080fd5b505af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069691906109bd565b506040516001600160a01b0385169060ff8716907f2c63ae6df00e90babc5d4997368fce457d90df78673d14a11435b7e4ecc2394090600090a35050505050565b6000546001600160a01b031633146107015760405162461bcd60e51b81526004016102a590610aad565b600280546001600160a01b0319166001600160a01b0383169081179091556040517f70880247142cf113e15f57599afcb48f4cdd196159d882cda54475da68ea996190600090a250565b6000546001600160a01b031633146107755760405162461bcd60e51b81526004016102a590610aad565b6001600160a01b0381166107da5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a5565b6107e381610883565b50565b600054600160a01b900460ff166108365760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a5565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600054600160a01b900460ff16156109205760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a5565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586108663390565b80356001600160a01b038116811461097257600080fd5b919050565b803560ff8116811461097257600080fd5b805169ffffffffffffffffffff8116811461097257600080fd5b6000602082840312156109b457600080fd5b6104a28261095b565b6000602082840312156109cf57600080fd5b5051919050565b6000602082840312156109e857600080fd5b6104a282610977565b600080600080600060a08688031215610a0957600080fd5b610a1286610988565b9450602086015193506040860151925060608601519150610a3560808701610988565b90509295509295909350565b60008060008060808587031215610a5757600080fd5b610a6085610977565b9350610a6e6020860161095b565b93969395505050506040820135916060013590565b60008060408385031215610a9657600080fd5b610a9f83610977565b946020939093013593505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082610aff57634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b2c57634e487b7160e01b600052601160045260246000fd5b50029056fea2646970667358221220cfc487a36761869265da7f91c6407b03727513fac4510be0dde522655b6c560864736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "buy(uint8,address,uint256,uint256)": {
        "params": {
          "deadline": "Timestamp of deadline.",
          "priceMax": "Maximum price.",
          "product": "Target product.",
          "recipient": "Product recipient."
        }
      },
      "changePriceFeed(address)": {
        "params": {
          "_priceFeed": "New price feed oracle address."
        }
      },
      "changeProduct(uint8,uint256)": {
        "params": {
          "id": "Product identificator.",
          "priceUSD": "Product price in USD with price feed oracle decimals (zero if product is not for sale)."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "price(uint8)": {
        "params": {
          "product": "Target product."
        },
        "returns": {
          "_0": "Product price in ETH."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balance()": {
        "notice": "Balance contract address."
      },
      "buy(uint8,address,uint256,uint256)": {
        "notice": "Buy product."
      },
      "changePriceFeed(address)": {
        "notice": "Change price feed oracle address."
      },
      "changeProduct(uint8,uint256)": {
        "notice": "Update product price."
      },
      "price(uint8)": {
        "notice": "Get current product price."
      },
      "priceFeed()": {
        "notice": "Price feed oracle."
      },
      "products(uint8)": {
        "notice": "Products."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Store.sol:Store",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 167,
        "contract": "contracts/Store.sol:Store",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3032,
        "contract": "contracts/Store.sol:Store",
        "label": "balance",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Balance)2245"
      },
      {
        "astId": 3036,
        "contract": "contracts/Store.sol:Store",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3041,
        "contract": "contracts/Store.sol:Store",
        "label": "products",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint8,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(Balance)2245": {
        "encoding": "inplace",
        "label": "contract Balance",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint8,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
