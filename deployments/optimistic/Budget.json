{
  "name": "Budget",
  "address": "0x6242b2E97c1DE936A1c89a1DdA41FaD39f88562b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "ExpenditureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAXIMUM_RECIPIENT_COUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "name": "changeExpenditure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deficit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "deficitTo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "expenditures",
      "outputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "min",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "target",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipients",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xde6c4d549b8c850a29f457343d1fb7e0d96345bf6a103a34585c9db64d544ca8",
  "receipt": {
    "to": null,
    "from": "0xBB73463b88b0Cb9681f176d6D43a12C2FeA2c237",
    "contractAddress": "0x6242b2E97c1DE936A1c89a1DdA41FaD39f88562b",
    "transactionIndex": 0,
    "gasUsed": "964986",
    "logsBloom": "0x
    "blockHash": "0xc9aedfcda19d7ee904702583011747e671c465bdc41125f1ea9b5df3d51bd3d3",
    "transactionHash": "0xde6c4d549b8c850a29f457343d1fb7e0d96345bf6a103a34585c9db64d544ca8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5536822,
        "transactionHash": "0xde6c4d549b8c850a29f457343d1fb7e0d96345bf6a103a34585c9db64d544ca8",
        "address": "0x6242b2E97c1DE936A1c89a1DdA41FaD39f88562b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bb73463b88b0cb9681f176d6d43a12c2fea2c237"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc9aedfcda19d7ee904702583011747e671c465bdc41125f1ea9b5df3d51bd3d3"
      }
    ],
    "blockNumber": 5536822,
    "cumulativeGasUsed": "964986",
    "status": 1,
    "byzantium": true
  },
  "blockNumber": 5536822,
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "4824b5d056196586c4572caef94d3062",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"ExpenditureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAXIMUM_RECIPIENT_COUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"name\":\"changeExpenditure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deficit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deficitTo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"expenditures\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"target\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipients\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changeExpenditure(address,uint256,uint256)\":{\"params\":{\"min\":\"Minimal balance for payment.\",\"recipient\":\"Recipient address.\",\"target\":\"Target balance.\"}},\"deficit()\":{\"returns\":{\"_0\":\"Summary balance deficit of all recipients.\"}},\"deficitTo(address)\":{\"params\":{\"recipient\":\"Target recipient.\"},\"returns\":{\"_0\":\"Balance deficit of recipient.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"recipients()\":{\"returns\":{\"_0\":\"Recipients addresses.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferETH(address,uint256)\":{\"params\":{\"amount\":\"Transfer amount.\",\"recipient\":\"Recipient.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"_recipients\":{\"details\":\"Recipients addresses list.\"},\"balanceOf\":{\"details\":\"Withdrawal balance of recipients.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"MAXIMUM_RECIPIENT_COUNT()\":{\"notice\":\"Maximum recipient count.\"},\"changeExpenditure(address,uint256,uint256)\":{\"notice\":\"Change expenditure item.\"},\"deficit()\":{\"notice\":\"Return summary balance deficit of all recipients.\"},\"deficitTo(address)\":{\"notice\":\"Return balance deficit of recipient.\"},\"expenditures(address)\":{\"notice\":\"Expenditure item to address.\"},\"pay()\":{\"notice\":\"Pay ETH to all recipients with balance deficit.\"},\"recipients()\":{\"notice\":\"Return all recipients addresses.\"},\"totalSupply()\":{\"notice\":\"Total withdrawal balance.\"},\"transferETH(address,uint256)\":{\"notice\":\"Transfer ETH to recipient.\"},\"withdraw()\":{\"notice\":\"Withdraw ETH to recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Budget.sol\":\"Budget\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x211639753e28bdca7f98618f51dca3dcd08a88b57c45050eb05fa4d0053327c3\",\"license\":\"MIT\"},\"contracts/Budget.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract Budget is Ownable {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  /// @notice Maximum recipient count.\\n  uint256 public constant MAXIMUM_RECIPIENT_COUNT = 200;\\n\\n  struct Expenditure {\\n    // Recipient address.\\n    address recipient;\\n    // Minimum balance at which budget allocation is performed.\\n    uint256 min;\\n    // Target balance at budget allocation.\\n    uint256 target;\\n  }\\n\\n  /// @notice Expenditure item to address.\\n  mapping(address => Expenditure) public expenditures;\\n\\n  /// @dev Recipients addresses list.\\n  EnumerableSet.AddressSet internal _recipients;\\n\\n  /// @dev Withdrawal balance of recipients.\\n  mapping(address => uint256) public balanceOf;\\n\\n  /// @notice Total withdrawal balance.\\n  uint256 public totalSupply;\\n\\n  event ExpenditureChanged(address indexed recipient, uint256 min, uint256 target);\\n\\n  event Withdrawal(address indexed recipient, uint256 amount);\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /**\\n   * @notice Change expenditure item.\\n   * @param recipient Recipient address.\\n   * @param min Minimal balance for payment.\\n   * @param target Target balance.\\n   */\\n  function changeExpenditure(\\n    address recipient,\\n    uint256 min,\\n    uint256 target\\n  ) external onlyOwner {\\n    require(min <= target, \\\"Budget::changeExpenditure: minimal balance should be less or equal target balance\\\");\\n    require(recipient != address(0), \\\"Budget::changeExpenditure: invalid recipient\\\");\\n\\n    expenditures[recipient] = Expenditure(recipient, min, target);\\n    if (target > 0) {\\n      _recipients.add(recipient);\\n      require(\\n        _recipients.length() <= MAXIMUM_RECIPIENT_COUNT,\\n        \\\"Budget::changeExpenditure: recipient must not exceed maximum count\\\"\\n      );\\n    } else {\\n      totalSupply -= balanceOf[recipient];\\n      balanceOf[recipient] = 0;\\n      _recipients.remove(recipient);\\n    }\\n    emit ExpenditureChanged(recipient, min, target);\\n  }\\n\\n  /**\\n   * @notice Transfer ETH to recipient.\\n   * @param recipient Recipient.\\n   * @param amount Transfer amount.\\n   */\\n  function transferETH(address payable recipient, uint256 amount) external onlyOwner {\\n    require(amount > 0, \\\"Budget::transferETH: negative or zero amount\\\");\\n    require(recipient != address(0), \\\"Budget::transferETH: invalid recipient\\\");\\n    require(amount <= address(this).balance - totalSupply, \\\"Budget::transferETH: transfer amount exceeds balance\\\");\\n\\n    recipient.transfer(amount);\\n  }\\n\\n  /**\\n   * @notice Return all recipients addresses.\\n   * @return Recipients addresses.\\n   */\\n  function recipients() external view returns (address[] memory) {\\n    address[] memory result = new address[](_recipients.length());\\n\\n    for (uint256 i = 0; i < _recipients.length(); i++) {\\n      result[i] = _recipients.at(i);\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Return balance deficit of recipient.\\n   * @param recipient Target recipient.\\n   * @return Balance deficit of recipient.\\n   */\\n  function deficitTo(address recipient) public view returns (uint256) {\\n    require(_recipients.contains(recipient), \\\"Budget::deficitTo: recipient not in expenditure item\\\");\\n\\n    uint256 availableBalance = recipient.balance + balanceOf[recipient];\\n    if (availableBalance >= expenditures[recipient].min) return 0;\\n\\n    return expenditures[recipient].target - availableBalance;\\n  }\\n\\n  /**\\n   * @notice Return summary balance deficit of all recipients.\\n   * @return Summary balance deficit of all recipients.\\n   */\\n  function deficit() public view returns (uint256) {\\n    uint256 result;\\n\\n    for (uint256 i = 0; i < _recipients.length(); i++) {\\n      result += deficitTo(_recipients.at(i));\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Pay ETH to all recipients with balance deficit.\\n   */\\n  function pay() external {\\n    for (uint256 i = 0; i < _recipients.length(); i++) {\\n      uint256 budgetBalance = address(this).balance - totalSupply;\\n      address recipient = _recipients.at(i);\\n      uint256 amount = deficitTo(recipient);\\n      if (amount == 0 || budgetBalance < amount) continue;\\n\\n      balanceOf[recipient] += amount;\\n      totalSupply += amount;\\n    }\\n  }\\n\\n  /**\\n   * @notice Withdraw ETH to recipient.\\n   */\\n  function withdraw() external {\\n    address payable recipient = payable(_msgSender());\\n    uint256 amount = balanceOf[recipient];\\n    require(amount > 0, \\\"Budget::withdraw: transfer amount exceeds balance\\\");\\n\\n    balanceOf[recipient] = 0;\\n    totalSupply -= amount;\\n    recipient.transfer(amount);\\n    emit Withdrawal(recipient, amount);\\n  }\\n}\\n\",\"keccak256\":\"0xd58efa36cc2509940371e64ccab5a8f3391e939870c656857e762a3a75e7d146\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61100a8061007e6000396000f3fe6080604052600436106100e15760003560e01c8063715018a61161007f578063e21fe96111610059578063e21fe96114610227578063e9cf66f114610293578063f2fde38b146102b3578063f9462173146102d357600080fd5b8063715018a6146101ca5780637b1a4909146101df5780638da5cb5b146101ff57600080fd5b80631b9265b8116100bb5780631b9265b81461015e5780633ccfd60b146101735780635426fa8a1461018857806370a082311461019d57600080fd5b80630d432021146100ed5780630e57d4ce1461010f57806318160ddd1461013a57600080fd5b366100e857005b600080fd5b3480156100f957600080fd5b5061010d610108366004610e66565b6102e8565b005b34801561011b57600080fd5b506101246105b0565b6040516101319190610e9b565b60405180910390f35b34801561014657600080fd5b5061015060055481565b604051908152602001610131565b34801561016a57600080fd5b5061010d610663565b34801561017f57600080fd5b5061010d61071d565b34801561019457600080fd5b50610150610844565b3480156101a957600080fd5b506101506101b8366004610e1d565b60046020526000908152604090205481565b3480156101d657600080fd5b5061010d610887565b3480156101eb57600080fd5b5061010d6101fa366004610e3a565b6108bd565b34801561020b57600080fd5b506000546040516001600160a01b039091168152602001610131565b34801561023357600080fd5b5061026e610242366004610e1d565b60016020819052600091825260409091208054918101546002909101546001600160a01b039092169183565b604080516001600160a01b039094168452602084019290925290820152606001610131565b34801561029f57600080fd5b506101506102ae366004610e1d565b610a65565b3480156102bf57600080fd5b5061010d6102ce366004610e1d565b610b5e565b3480156102df57600080fd5b5061015060c881565b6000546001600160a01b0316331461031b5760405162461bcd60e51b815260040161031290610ee8565b60405180910390fd5b808211156103ab5760405162461bcd60e51b815260206004820152605160248201527f4275646765743a3a6368616e6765457870656e6469747572653a206d696e696d60448201527f616c2062616c616e63652073686f756c64206265206c657373206f7220657175606482015270616c207461726765742062616c616e636560781b608482015260a401610312565b6001600160a01b0383166104165760405162461bcd60e51b815260206004820152602c60248201527f4275646765743a3a6368616e6765457870656e6469747572653a20696e76616c60448201526b1a59081c9958da5c1a595b9d60a21b6064820152608401610312565b604080516060810182526001600160a01b038581168083526020808401878152848601878152600093845260019283905295909220935184546001600160a01b03191693169290921783555190820155905160029091015580156105105761047f600284610bf6565b5060c861048c6002610c14565b111561050b5760405162461bcd60e51b815260206004820152604260248201527f4275646765743a3a6368616e6765457870656e6469747572653a20726563697060448201527f69656e74206d757374206e6f7420657863656564206d6178696d756d20636f756064820152611b9d60f21b608482015260a401610312565b610567565b6001600160a01b038316600090815260046020526040812054600580549192909161053c908490610f35565b90915550506001600160a01b038316600090815260046020526040812055610565600284610c1e565b505b60408051838152602081018390526001600160a01b038516917f5c315648fddc891fd463694f00b02e1b8e3a1847790fd85887fb41f7c28fb1ca910160405180910390a2505050565b606060006105be6002610c14565b67ffffffffffffffff8111156105d6576105d6610fa9565b6040519080825280602002602001820160405280156105ff578160200160208202803683370190505b50905060005b61060f6002610c14565b81101561065d57610621600282610c33565b82828151811061063357610633610f93565b6001600160a01b03909216602092830291909101909101528061065581610f4c565b915050610605565b50919050565b60005b6106706002610c14565b81101561071a576000600554476106879190610f35565b90506000610696600284610c33565b905060006106a382610a65565b90508015806106b157508083105b156106be57505050610708565b6001600160a01b038216600090815260046020526040812080548392906106e6908490610f1d565b9250508190555080600560008282546106ff9190610f1d565b90915550505050505b8061071281610f4c565b915050610666565b50565b33600081815260046020526040902054806107945760405162461bcd60e51b815260206004820152603160248201527f4275646765743a3a77697468647261773a207472616e7366657220616d6f756e6044820152707420657863656564732062616c616e636560781b6064820152608401610312565b6001600160a01b0382166000908152600460205260408120819055600580548392906107c1908490610f35565b90915550506040516001600160a01b0383169082156108fc029083906000818181858888f193505050501580156107fc573d6000803e3d6000fd5b50816001600160a01b03167f7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b658260405161083891815260200190565b60405180910390a25050565b60008060005b6108546002610c14565b81101561065d576108696102ae600283610c33565b6108739083610f1d565b91508061087f81610f4c565b91505061084a565b6000546001600160a01b031633146108b15760405162461bcd60e51b815260040161031290610ee8565b6108bb6000610c3f565b565b6000546001600160a01b031633146108e75760405162461bcd60e51b815260040161031290610ee8565b6000811161094c5760405162461bcd60e51b815260206004820152602c60248201527f4275646765743a3a7472616e736665724554483a206e65676174697665206f7260448201526b081e995c9bc8185b5bdd5b9d60a21b6064820152608401610312565b6001600160a01b0382166109b15760405162461bcd60e51b815260206004820152602660248201527f4275646765743a3a7472616e736665724554483a20696e76616c6964207265636044820152651a5c1a595b9d60d21b6064820152608401610312565b6005546109be9047610f35565b811115610a2a5760405162461bcd60e51b815260206004820152603460248201527f4275646765743a3a7472616e736665724554483a207472616e7366657220616d6044820152736f756e7420657863656564732062616c616e636560601b6064820152608401610312565b6040516001600160a01b0383169082156108fc029083906000818181858888f19350505050158015610a60573d6000803e3d6000fd5b505050565b6000610a72600283610c8f565b610adb5760405162461bcd60e51b815260206004820152603460248201527f4275646765743a3a64656669636974546f3a20726563697069656e74206e6f7460448201527320696e20657870656e646974757265206974656d60601b6064820152608401610312565b6001600160a01b0382166000818152600460205260408120549091610b01919031610f1d565b6001600160a01b038416600090815260016020819052604090912001549091508110610b305750600092915050565b6001600160a01b038316600090815260016020526040902060020154610b57908290610f35565b9392505050565b6000546001600160a01b03163314610b885760405162461bcd60e51b815260040161031290610ee8565b6001600160a01b038116610bed5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610312565b61071a81610c3f565b6000610c0b836001600160a01b038416610cb1565b90505b92915050565b6000610c0e825490565b6000610c0b836001600160a01b038416610d00565b6000610c0b8383610df3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811660009081526001830160205260408120541515610c0b565b6000818152600183016020526040812054610cf857508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c0e565b506000610c0e565b60008181526001830160205260408120548015610de9576000610d24600183610f35565b8554909150600090610d3890600190610f35565b9050818114610d9d576000866000018281548110610d5857610d58610f93565b9060005260206000200154905080876000018481548110610d7b57610d7b610f93565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080610dae57610dae610f7d565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c0e565b6000915050610c0e565b6000826000018281548110610e0a57610e0a610f93565b9060005260206000200154905092915050565b600060208284031215610e2f57600080fd5b8135610b5781610fbf565b60008060408385031215610e4d57600080fd5b8235610e5881610fbf565b946020939093013593505050565b600080600060608486031215610e7b57600080fd5b8335610e8681610fbf565b95602085013595506040909401359392505050565b6020808252825182820181905260009190848201906040850190845b81811015610edc5783516001600160a01b031683529284019291840191600101610eb7565b50909695505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008219821115610f3057610f30610f67565b500190565b600082821015610f4757610f47610f67565b500390565b6000600019821415610f6057610f60610f67565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461071a57600080fdfea264697066735822122068b798d5b2f5d854b0cbe917430716fc3b8ecfa44e59941e5da87e2a842dd30e64736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changeExpenditure(address,uint256,uint256)": {
        "params": {
          "min": "Minimal balance for payment.",
          "recipient": "Recipient address.",
          "target": "Target balance."
        }
      },
      "deficit()": {
        "returns": {
          "_0": "Summary balance deficit of all recipients."
        }
      },
      "deficitTo(address)": {
        "params": {
          "recipient": "Target recipient."
        },
        "returns": {
          "_0": "Balance deficit of recipient."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "recipients()": {
        "returns": {
          "_0": "Recipients addresses."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferETH(address,uint256)": {
        "params": {
          "amount": "Transfer amount.",
          "recipient": "Recipient."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "_recipients": {
        "details": "Recipients addresses list."
      },
      "balanceOf": {
        "details": "Withdrawal balance of recipients."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "MAXIMUM_RECIPIENT_COUNT()": {
        "notice": "Maximum recipient count."
      },
      "changeExpenditure(address,uint256,uint256)": {
        "notice": "Change expenditure item."
      },
      "deficit()": {
        "notice": "Return summary balance deficit of all recipients."
      },
      "deficitTo(address)": {
        "notice": "Return balance deficit of recipient."
      },
      "expenditures(address)": {
        "notice": "Expenditure item to address."
      },
      "pay()": {
        "notice": "Pay ETH to all recipients with balance deficit."
      },
      "recipients()": {
        "notice": "Return all recipients addresses."
      },
      "totalSupply()": {
        "notice": "Total withdrawal balance."
      },
      "transferETH(address,uint256)": {
        "notice": "Transfer ETH to recipient."
      },
      "withdraw()": {
        "notice": "Withdraw ETH to recipient."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/Budget.sol:Budget",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2272,
        "contract": "contracts/Budget.sol:Budget",
        "label": "expenditures",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Expenditure)2266_storage)"
      },
      {
        "astId": 2276,
        "contract": "contracts/Budget.sol:Budget",
        "label": "_recipients",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(AddressSet)1193_storage"
      },
      {
        "astId": 2281,
        "contract": "contracts/Budget.sol:Budget",
        "label": "balanceOf",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2284,
        "contract": "contracts/Budget.sol:Budget",
        "label": "totalSupply",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Expenditure)2266_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Budget.Expenditure)",
        "numberOfBytes": "32",
        "value": "t_struct(Expenditure)2266_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1193_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1192,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)922_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Expenditure)2266_storage": {
        "encoding": "inplace",
        "label": "struct Budget.Expenditure",
        "members": [
          {
            "astId": 2261,
            "contract": "contracts/Budget.sol:Budget",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2263,
            "contract": "contracts/Budget.sol:Budget",
            "label": "min",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2265,
            "contract": "contracts/Budget.sol:Budget",
            "label": "target",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)922_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 917,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 921,
            "contract": "contracts/Budget.sol:Budget",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
