{
  "language": "Solidity",
  "sources": {
    "contracts/ApprovableBalance.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n// solhint-disable avoid-tx-origin\ncontract ApprovableBalance is Ownable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @notice Maximum consumer count.\n  uint256 public constant MAXIMUM_CONSUMER_COUNT = 100;\n\n  /// @notice Payable token.\n  IERC20 public token;\n\n  /// @notice Treasury contract\n  address public treasury;\n\n  /// @dev Consumers list.\n  EnumerableSet.AddressSet internal _consumers;\n\n  event TokenChanged(address indexed token);\n\n  event TreasuryChanged(address indexed treasury);\n\n  event Claim(address indexed account, uint256 gasFee, uint256 protocolFee);\n\n  event ConsumerAdded(address indexed consumer);\n\n  event ConsumerRemoved(address indexed consumer);\n\n  constructor(address _token, address _treasury) {\n    token = IERC20(_token);\n    treasury = _treasury;\n  }\n\n  /**\n   * @notice Change payable token address.\n   * @param _token New payable token address.\n   */\n  function changeToken(address _token) external onlyOwner {\n    token = IERC20(_token);\n    emit TokenChanged(_token);\n  }\n\n  /**\n   * @notice Change treasury contract address.\n   * @param _treasury New treasury contract address.\n   */\n  function changeTreasury(address _treasury) external onlyOwner {\n    treasury = _treasury;\n    emit TreasuryChanged(treasury);\n  }\n\n  /**\n   * @notice Add consumer.\n   * @param consumer Added consumer.\n   */\n  function addConsumer(address consumer) external onlyOwner {\n    require(!_consumers.contains(consumer), \"ApprovableBalance::addConsumer: consumer already added\");\n    require(\n      _consumers.length() < MAXIMUM_CONSUMER_COUNT,\n      \"ApprovableBalance::addConsumer: consumer must not exceed maximum count\"\n    );\n\n    _consumers.add(consumer);\n\n    emit ConsumerAdded(consumer);\n  }\n\n  /**\n   * @notice Remove consumer.\n   * @param consumer Removed consumer.\n   */\n  function removeConsumer(address consumer) external onlyOwner {\n    require(_consumers.contains(consumer), \"ApprovableBalance::removeConsumer: consumer already removed\");\n\n    _consumers.remove(consumer);\n\n    emit ConsumerRemoved(consumer);\n  }\n\n  /**\n   * @notice Get all consumers.\n   * @return All consumers addresses.\n   */\n  function consumers() external view returns (address[] memory) {\n    address[] memory result = new address[](_consumers.length());\n\n    for (uint256 i = 0; i < _consumers.length(); i++) {\n      result[i] = _consumers.at(i);\n    }\n\n    return result;\n  }\n\n  /**\n   * @notice Send claim.\n   * @param account Target account.\n   * @param gasFee Claim gas fee.\n   * @param protocolFee Claim protocol fee.\n   */\n  function claim(\n    address account,\n    uint256 gasFee,\n    uint256 protocolFee\n  ) external {\n    if (tx.origin == account) return;\n    require(_consumers.contains(tx.origin), \"ApprovableBalance: caller is not a consumer\");\n\n    uint256 amount = gasFee + protocolFee;\n    require(amount > 0, \"ApprovableBalance::claim: negative or zero claim\");\n\n    token.transferFrom(account, treasury, amount);\n    emit Claim(account, gasFee, protocolFee);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/automate/SmartTrade.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"./dex/IRouter.sol\";\nimport \"../ApprovableBalance.sol\";\n\ncontract SmartTrade is Ownable {\n  using EnumerableSet for EnumerableSet.UintSet;\n\n  struct Limit {\n    // Target amount out.\n    uint256 amountOut;\n    // Minimum amount of output token on swap.\n    uint256 amountOutMin;\n    // Throttle blocks.\n    uint256 throttle;\n    // Throttle start block number.\n    uint256 throttleBlock;\n  }\n\n  struct Order {\n    // Identificator.\n    uint256 id;\n    // Customer address.\n    address customer;\n    // Order amount.\n    uint256 amountIn;\n    // Swap router.\n    address router;\n    // Swap path.\n    address[] path;\n    // Take profit limit.\n    Limit takeProfit;\n    // Stop loss limit.\n    Limit stopLoss;\n  }\n\n  /// @notice Balance contract\n  ApprovableBalance public balance;\n\n  /// @notice Orders.\n  mapping(uint256 => Order) public orders;\n\n  /// @dev Active orders set.\n  EnumerableSet.UintSet internal _activeOrders;\n\n  /// @notice Orders count.\n  uint256 public ordersCount;\n\n  event BalanceChanged(address indexed balance);\n\n  event OrderCreated(uint256 indexed id, address indexed customer);\n\n  event OrderCanceled(uint256 indexed id);\n\n  event OrderCompleted(uint256 indexed id);\n\n  /**\n   * @param _balance Balance contract address.\n   */\n  constructor(address _balance) {\n    balance = ApprovableBalance(_balance);\n  }\n\n  /**\n   * @notice Change balance contract address.\n   * @param _balance New tbalance contract address.\n   */\n  function changeBalance(address _balance) external onlyOwner {\n    balance = ApprovableBalance(_balance);\n    emit BalanceChanged(_balance);\n  }\n\n  /**\n   * @notice Create new order.\n   * @param amountIn Order amount in tokens.\n   * @param router Used swap router.\n   * @param path Swap path.\n   * @param takeProfit Take profit limit.\n   * @param stopLoss Stop loss limit.\n   * @return oid New order identificator.\n   */\n  function createOrder(\n    uint256 amountIn,\n    address router,\n    address[] memory path,\n    Limit memory takeProfit,\n    Limit memory stopLoss\n  ) external returns (uint256 oid) {\n    require(amountIn > 0, \"SmartTrader::createOrder: invalid amount in\");\n    require(router != address(0), \"SmartTrader::createOrder: invalid router\");\n    require(path.length > 1, \"SmartTrader::createOrder: invalid path\");\n    require(takeProfit.amountOut > 0 || stopLoss.amountOut > 0, \"SmartTrader::createOrder: empty order\");\n\n    oid = ordersCount++;\n    orders[oid] = Order(oid, msg.sender, amountIn, router, path, takeProfit, stopLoss);\n    _activeOrders.add(oid);\n    emit OrderCreated(oid, msg.sender);\n  }\n\n  /**\n   * @notice Cancel active order.\n   * @param oid Target order ID.\n   */\n  function cancelOrder(uint256 oid) external {\n    require(oid < ordersCount, \"SmartTrade::cancelOrder: invalid order id\");\n    require(isActive(oid), \"SmartTrade::cancelOrder: order already completed\");\n    require(orders[oid].customer == msg.sender, \"SmartTrade::cancelOrder: only owner can cancel this order\");\n\n    _activeOrders.remove(oid);\n    emit OrderCanceled(oid);\n  }\n\n  function activeOrders() external view returns (uint256[] memory oids) {\n    oids = new uint256[](_activeOrders.length());\n    for (uint256 i = 0; i < _activeOrders.length(); i++) {\n      oids[i] = _activeOrders.at(i);\n    }\n  }\n\n  /**\n   * @param oid Target order id.\n   * @return Is order active.\n   */\n  function isActive(uint256 oid) public view returns (bool) {\n    return _activeOrders.contains(oid);\n  }\n\n  function _swap(\n    Order storage order,\n    uint256 amountOutMin,\n    uint256 gasFee,\n    uint256 protocolFee,\n    uint256 deadline\n  ) internal {\n    balance.claim(order.customer, gasFee, protocolFee);\n    _activeOrders.remove(order.id);\n    IERC20 tokenIn = IERC20(order.path[0]);\n    tokenIn.transferFrom(order.customer, address(this), order.amountIn);\n    tokenIn.approve(order.router, order.amountIn);\n    IRouter(order.router).swapExactTokensForTokens(order.amountIn, amountOutMin, order.path, order.customer, deadline);\n    emit OrderCompleted(order.id);\n  }\n\n  function _checkLimit(\n    Order storage order,\n    Limit storage limit,\n    uint256 gasFee,\n    uint256 protocolFee,\n    uint256 deadline\n  ) internal {\n    if (limit.throttle > 0) {\n      if (limit.throttleBlock == 0) {\n        limit.throttleBlock = block.number;\n        return balance.claim(order.customer, gasFee, 0);\n      } else if (block.number < limit.throttleBlock + limit.throttle) {\n        return;\n      }\n    }\n    return _swap(order, limit.amountOutMin, gasFee, protocolFee, deadline);\n  }\n\n  function _skipThrottle(\n    Order storage order,\n    Limit storage limit,\n    uint256 gasFee,\n    uint256 protocolFee\n  ) internal {\n    limit.throttleBlock = 0;\n    return balance.claim(order.customer, gasFee, protocolFee);\n  }\n\n  /**\n   * @notice Check order.\n   * @param oid Target order ID.\n   * @param gasFee Gas fee for this tx.\n   * @param protocolFee Protocol fee for this tx.\n   * @param deadline Deadline for swap.\n   */\n  function check(\n    uint256 oid,\n    uint256 gasFee,\n    uint256 protocolFee,\n    uint256 deadline\n  ) external {\n    require(oid < ordersCount, \"SmartTrade:check: invalid order id\");\n\n    Order storage order = orders[oid];\n    require(isActive(oid), \"SmartTrade:check: order completed\");\n\n    uint256[] memory amountsOut = IRouter(order.router).getAmountsOut(order.amountIn, order.path);\n    if (order.takeProfit.amountOut > 0) {\n      if (amountsOut[order.path.length - 1] >= order.takeProfit.amountOut) {\n        return _checkLimit(order, order.takeProfit, gasFee, protocolFee, deadline);\n      } else if (order.takeProfit.throttleBlock > 0) {\n        return _skipThrottle(order, order.takeProfit, gasFee, protocolFee);\n      }\n    }\n    if (order.stopLoss.amountOut > 0) {\n      if (amountsOut[order.path.length - 1] <= order.stopLoss.amountOut) {\n        return _checkLimit(order, order.stopLoss, gasFee, protocolFee, deadline);\n      } else if (order.stopLoss.throttleBlock > 0) {\n        return _skipThrottle(order, order.stopLoss, gasFee, protocolFee);\n      }\n    }\n  }\n}\n"
    },
    "contracts/automate/dex/IRouter.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\ninterface IRouter {\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external returns (uint256[] memory amounts);\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external;\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256 amountAMin,\n    uint256 amountBMin,\n    address to,\n    uint256 deadline\n  )\n    external\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    );\n\n  function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/automate/dex/mock/RouterMock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../IRouter.sol\";\n\ncontract RouterMock is IRouter {\n  address public lpToken;\n\n  mapping(address => uint256) public prices;\n\n  constructor(address _lpToken) {\n    lpToken = _lpToken;\n  }\n\n  function setPrice(address token, uint256 price) external {\n    prices[token] = price;\n  }\n\n  function swapExactTokensForTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256\n  ) public override returns (uint256[] memory amounts) {\n    IERC20(path[0]).transferFrom(msg.sender, address(this), amountIn);\n    uint256 price = prices[path[path.length - 1]];\n    IERC20(path[path.length - 1]).transfer(to, price != 0 ? price * amountIn : amountOutMin);\n\n    return amounts;\n  }\n\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n    uint256 amountIn,\n    uint256 amountOutMin,\n    address[] calldata path,\n    address to,\n    uint256 deadline\n  ) external override {\n    swapExactTokensForTokens(amountIn, amountOutMin, path, to, deadline);\n  }\n\n  function addLiquidity(\n    address tokenA,\n    address tokenB,\n    uint256 amountADesired,\n    uint256 amountBDesired,\n    uint256,\n    uint256,\n    address to,\n    uint256\n  )\n    external\n    override\n    returns (\n      uint256 amountA,\n      uint256 amountB,\n      uint256 liquidity\n    )\n  {\n    amountA = amountADesired;\n    IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);\n    amountB = amountBDesired;\n    IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);\n    liquidity = 10e18;\n    IERC20(lpToken).transfer(to, liquidity);\n  }\n\n  function getAmountsOut(uint256 amountIn, address[] memory path)\n    external\n    view\n    override\n    returns (uint256[] memory amounts)\n  {\n    amounts = new uint256[](path.length);\n    for (uint256 i = 0; i < path.length; i++) {\n      amounts[i] = i == path.length - 1 ? amountIn * prices[path[path.length - 1]] : amountIn;\n    }\n  }\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract Treasury is Ownable {\n  // solhint-disable-next-line no-empty-blocks\n  receive() external payable {}\n\n  /**\n   * @notice Transfer token to recipient.\n   * @param token Target token.\n   * @param recipient Recipient.\n   * @param amount Transfer amount.\n   */\n  function transfer(\n    IERC20 token,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    require(amount > 0, \"Treasury::transfer: negative or zero amount\");\n    require(recipient != address(0), \"Treasury::transfer: invalid recipient\");\n    token.transfer(recipient, amount);\n  }\n\n  /**\n   * @notice Transfer ETH to recipient.\n   * @param recipient Recipient.\n   * @param amount Transfer amount.\n   */\n  function transferETH(address payable recipient, uint256 amount) external onlyOwner {\n    require(amount > 0, \"Treasury::transferETH: negative or zero amount\");\n    require(recipient != address(0), \"Treasury::transferETH: invalid recipient\");\n    recipient.transfer(amount);\n  }\n\n  /**\n   * @notice Approve token to recipient.\n   * @param token Target token.\n   * @param recipient Recipient.\n   * @param amount Approve amount.\n   */\n  function approve(\n    IERC20 token,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    uint256 allowance = token.allowance(address(this), recipient);\n    if (allowance > 0) {\n      token.approve(recipient, 0);\n    }\n    token.approve(recipient, amount);\n  }\n}\n"
    },
    "contracts/Store.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./Balance.sol\";\n\ncontract Store is Ownable, Pausable {\n  /// @notice Balance contract address.\n  Balance public balance;\n\n  /// @notice Price feed oracle.\n  AggregatorV3Interface public priceFeed;\n\n  /// @notice Products.\n  mapping(uint8 => uint256) public products;\n\n  event ProductChanged(uint8 indexed product, uint256 priceUSD);\n\n  event PriceFeedChanged(address indexed priceFeed);\n\n  event Buy(uint8 indexed product, address indexed recipient);\n\n  constructor(address _balance, address _priceFeed) {\n    balance = Balance(_balance);\n    priceFeed = AggregatorV3Interface(_priceFeed);\n  }\n\n  /**\n   * @notice Change price feed oracle address.\n   * @param _priceFeed New price feed oracle address.\n   */\n  function changePriceFeed(address _priceFeed) external onlyOwner {\n    priceFeed = AggregatorV3Interface(_priceFeed);\n    emit PriceFeedChanged(_priceFeed);\n  }\n\n  /**\n   * @notice Update product price.\n   * @param id Product identificator.\n   * @param priceUSD Product price in USD with price feed oracle decimals (zero if product is not for sale).\n   */\n  function changeProduct(uint8 id, uint256 priceUSD) external onlyOwner {\n    products[id] = priceUSD;\n    emit ProductChanged(id, priceUSD);\n  }\n\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n\n  /**\n   * @notice Get current product price.\n   * @param product Target product.\n   * @return Product price in ETH.\n   */\n  function price(uint8 product) public view returns (uint256) {\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    require(answer > 0, \"Store: invalid price\");\n\n    return (products[product] * 1e18) / uint256(answer);\n  }\n\n  /**\n   * @notice Buy product.\n   * @param product Target product.\n   * @param recipient Product recipient.\n   * @param priceMax Maximum price.\n   * @param deadline Timestamp of deadline.\n   */\n  function buy(\n    uint8 product,\n    address recipient,\n    uint256 priceMax,\n    uint256 deadline\n  ) external payable whenNotPaused {\n    // solhint-disable-next-line not-rely-on-time\n    require(deadline >= block.timestamp, \"Store: expired\");\n    uint256 currentPrice = price(product);\n    require(currentPrice > 0, \"Store: negative or zero price\");\n    require(currentPrice <= priceMax, \"Store: excessive price\");\n\n    balance.claim(_msgSender(), 0, currentPrice, \"STORE_BUY\");\n    emit Buy(product, recipient);\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n\n  function decimals()\n    external\n    view\n    returns (\n      uint8\n    );\n\n  function description()\n    external\n    view\n    returns (\n      string memory\n    );\n\n  function version()\n    external\n    view\n    returns (\n      uint256\n    );\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n}\n"
    },
    "contracts/Balance.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract Balance is Ownable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @notice Maximum inspector count.\n  uint256 public constant MAXIMUM_INSPECTOR_COUNT = 100;\n\n  /// @notice Maximum consumer count.\n  uint256 public constant MAXIMUM_CONSUMER_COUNT = 100;\n\n  /// @notice Maximum accept or reject claims by one call.\n  uint256 public constant MAXIMUM_CLAIM_PACKAGE = 500;\n\n  /// @notice Treasury contract\n  address payable public treasury;\n\n  /// @dev Inspectors list.\n  EnumerableSet.AddressSet internal _inspectors;\n\n  /// @dev Consumers list.\n  EnumerableSet.AddressSet internal _consumers;\n\n  /// @notice Account balance.\n  mapping(address => uint256) public balanceOf;\n\n  /// @notice Account claim.\n  mapping(address => uint256) public claimOf;\n\n  /// @notice Possible statuses that a bill may be in.\n  enum BillStatus {\n    Pending,\n    Accepted,\n    Rejected\n  }\n\n  struct Bill {\n    // Identificator.\n    uint256 id;\n    // Claimant.\n    address claimant;\n    // Target account.\n    address account;\n    // Claim gas fee.\n    uint256 gasFee;\n    // Claim protocol fee.\n    uint256 protocolFee;\n    // Current bill status.\n    BillStatus status;\n  }\n\n  /// @notice Bills.\n  mapping(uint256 => Bill) public bills;\n\n  /// @notice Bill count.\n  uint256 public billCount;\n\n  event TreasuryChanged(address indexed treasury);\n\n  event InspectorAdded(address indexed inspector);\n\n  event InspectorRemoved(address indexed inspector);\n\n  event ConsumerAdded(address indexed consumer);\n\n  event ConsumerRemoved(address indexed consumer);\n\n  event Deposit(address indexed recipient, uint256 amount);\n\n  event Refund(address indexed recipient, uint256 amount);\n\n  event Claim(address indexed account, uint256 indexed bill, string description);\n\n  event AcceptClaim(uint256 indexed bill);\n\n  event RejectClaim(uint256 indexed bill);\n\n  constructor(address payable _treasury) {\n    treasury = _treasury;\n  }\n\n  modifier onlyInspector() {\n    require(_inspectors.contains(_msgSender()), \"Balance: caller is not the inspector\");\n    _;\n  }\n\n  /**\n   * @notice Change treasury contract address.\n   * @param _treasury New treasury contract address.\n   */\n  function changeTreasury(address payable _treasury) external onlyOwner {\n    treasury = _treasury;\n    emit TreasuryChanged(treasury);\n  }\n\n  /**\n   * @notice Add inspector.\n   * @param inspector Added inspector.\n   */\n  function addInspector(address inspector) external onlyOwner {\n    require(!_inspectors.contains(inspector), \"Balance::addInspector: inspector already added\");\n    require(\n      _inspectors.length() < MAXIMUM_INSPECTOR_COUNT,\n      \"Balance::addInspector: inspector must not exceed maximum count\"\n    );\n\n    _inspectors.add(inspector);\n\n    emit InspectorAdded(inspector);\n  }\n\n  /**\n   * @notice Remove inspector.\n   * @param inspector Removed inspector.\n   */\n  function removeInspector(address inspector) external onlyOwner {\n    require(_inspectors.contains(inspector), \"Balance::removeInspector: inspector already removed\");\n\n    _inspectors.remove(inspector);\n\n    emit InspectorRemoved(inspector);\n  }\n\n  /**\n   * @notice Get all inspectors.\n   * @return All inspectors addresses.\n   */\n  function inspectors() external view returns (address[] memory) {\n    address[] memory result = new address[](_inspectors.length());\n\n    for (uint256 i = 0; i < _inspectors.length(); i++) {\n      result[i] = _inspectors.at(i);\n    }\n\n    return result;\n  }\n\n  /**\n   * @notice Add consumer.\n   * @param consumer Added consumer.\n   */\n  function addConsumer(address consumer) external onlyOwner {\n    require(!_consumers.contains(consumer), \"Balance::addConsumer: consumer already added\");\n    require(\n      _consumers.length() < MAXIMUM_CONSUMER_COUNT,\n      \"Balance::addConsumer: consumer must not exceed maximum count\"\n    );\n\n    _consumers.add(consumer);\n\n    emit ConsumerAdded(consumer);\n  }\n\n  /**\n   * @notice Remove consumer.\n   * @param consumer Removed consumer.\n   */\n  function removeConsumer(address consumer) external onlyOwner {\n    require(_consumers.contains(consumer), \"Balance::removeConsumer: consumer already removed\");\n\n    _consumers.remove(consumer);\n\n    emit ConsumerRemoved(consumer);\n  }\n\n  /**\n   * @notice Get all consumers.\n   * @return All consumers addresses.\n   */\n  function consumers() external view returns (address[] memory) {\n    address[] memory result = new address[](_consumers.length());\n\n    for (uint256 i = 0; i < _consumers.length(); i++) {\n      result[i] = _consumers.at(i);\n    }\n\n    return result;\n  }\n\n  /**\n   * @notice Get net balance of account.\n   * @param account Target account.\n   * @return Net balance (balance minus claim).\n   */\n  function netBalanceOf(address account) public view returns (uint256) {\n    return balanceOf[account] - claimOf[account];\n  }\n\n  /**\n   * @notice Deposit ETH to balance.\n   * @param recipient Target recipient.\n   */\n  function deposit(address recipient) external payable {\n    require(recipient != address(0), \"Balance::deposit: invalid recipient\");\n    require(msg.value > 0, \"Balance::deposit: negative or zero deposit\");\n\n    balanceOf[recipient] += msg.value;\n\n    emit Deposit(recipient, msg.value);\n  }\n\n  /**\n   * @notice Refund ETH from balance.\n   * @param amount Refunded amount.\n   */\n  function refund(uint256 amount) external {\n    address payable recipient = payable(_msgSender());\n    require(amount > 0, \"Balance::refund: negative or zero refund\");\n    require(amount <= netBalanceOf(recipient), \"Balance::refund: refund amount exceeds net balance\");\n\n    balanceOf[recipient] -= amount;\n    recipient.transfer(amount);\n\n    emit Refund(recipient, amount);\n  }\n\n  /**\n   * @notice Send claim.\n   * @param account Target account.\n   * @param gasFee Claim gas fee.\n   * @param protocolFee Claim protocol fee.\n   * @param description Claim description.\n   */\n  function claim(\n    address account,\n    uint256 gasFee,\n    uint256 protocolFee,\n    string memory description\n  ) external returns (uint256) {\n    require(\n      // solhint-disable-next-line avoid-tx-origin\n      tx.origin == account || _consumers.contains(tx.origin),\n      \"Balance: caller is not a consumer\"\n    );\n\n    uint256 amount = gasFee + protocolFee;\n    require(amount > 0, \"Balance::claim: negative or zero claim\");\n    require(amount <= netBalanceOf(account), \"Balance::claim: claim amount exceeds net balance\");\n\n    claimOf[account] += amount;\n    billCount++;\n    bills[billCount] = Bill(billCount, _msgSender(), account, gasFee, protocolFee, BillStatus.Pending);\n    emit Claim(account, billCount, description);\n\n    return billCount;\n  }\n\n  /**\n   * @notice Accept bills package.\n   * @param _bills Target bills.\n   * @param gasFees Confirmed claims gas fees by bills.\n   * @param protocolFees Confirmed claims protocol fees by bills.\n   */\n  function acceptClaims(\n    uint256[] memory _bills,\n    uint256[] memory gasFees,\n    uint256[] memory protocolFees\n  ) external onlyInspector {\n    require(\n      _bills.length == gasFees.length && _bills.length == protocolFees.length,\n      \"Balance::acceptClaims: arity mismatch\"\n    );\n    require(_bills.length <= MAXIMUM_CLAIM_PACKAGE, \"Balance::acceptClaims: too many claims\");\n\n    uint256 transferredAmount;\n    for (uint256 i = 0; i < _bills.length; i++) {\n      uint256 billId = _bills[i];\n      require(billId > 0 && billId <= billCount, \"Balance::acceptClaims: bill not found\");\n\n      uint256 gasFee = gasFees[i];\n      uint256 protocolFee = protocolFees[i];\n      uint256 amount = gasFee + protocolFee;\n\n      Bill storage bill = bills[billId];\n      uint256 claimAmount = bill.gasFee + bill.protocolFee;\n      require(bill.status == BillStatus.Pending, \"Balance::acceptClaims: bill already processed\");\n      require(amount <= claimAmount, \"Balance::acceptClaims: claim amount exceeds max fee\");\n\n      bill.status = BillStatus.Accepted;\n      bill.gasFee = gasFee;\n      bill.protocolFee = protocolFee;\n      claimOf[bill.account] -= claimAmount;\n      balanceOf[bill.account] -= amount;\n      transferredAmount += amount;\n\n      emit AcceptClaim(bill.id);\n    }\n    treasury.transfer(transferredAmount);\n  }\n\n  /**\n   * @notice Reject bills package.\n   * @param _bills Target bills.\n   */\n  function rejectClaims(uint256[] memory _bills) external onlyInspector {\n    require(_bills.length < MAXIMUM_CLAIM_PACKAGE, \"Balance::rejectClaims: too many claims\");\n\n    for (uint256 i = 0; i < _bills.length; i++) {\n      uint256 billId = _bills[i];\n      require(billId > 0 && billId <= billCount, \"Balance::rejectClaims: bill not found\");\n\n      Bill storage bill = bills[billId];\n      require(bill.status == BillStatus.Pending, \"Balance::rejectClaims: bill already processed\");\n      uint256 amount = bill.gasFee + bill.protocolFee;\n\n      bill.status = BillStatus.Rejected;\n      claimOf[bill.account] -= amount;\n\n      emit RejectClaim(bill.id);\n    }\n  }\n}\n"
    },
    "contracts/mock/BalanceConsumerMock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"../Balance.sol\";\n\ncontract BalanceConsumerMock {\n  Balance public balance;\n\n  constructor(address _balance) {\n    balance = Balance(_balance);\n  }\n\n  function consume(\n    address account,\n    uint256 gasFee,\n    uint256 protocolFee,\n    string memory description\n  ) external {\n    balance.claim(account, gasFee, protocolFee, description);\n  }\n}\n"
    },
    "contracts/Budget.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\ncontract Budget is Ownable {\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @notice Maximum recipient count.\n  uint256 public constant MAXIMUM_RECIPIENT_COUNT = 200;\n\n  struct Expenditure {\n    // Recipient address.\n    address recipient;\n    // Minimum balance at which budget allocation is performed.\n    uint256 min;\n    // Target balance at budget allocation.\n    uint256 target;\n  }\n\n  /// @notice Expenditure item to address.\n  mapping(address => Expenditure) public expenditures;\n\n  /// @dev Recipients addresses list.\n  EnumerableSet.AddressSet internal _recipients;\n\n  /// @dev Withdrawal balance of recipients.\n  mapping(address => uint256) public balanceOf;\n\n  /// @notice Total withdrawal balance.\n  uint256 public totalSupply;\n\n  event ExpenditureChanged(address indexed recipient, uint256 min, uint256 target);\n\n  event Withdrawal(address indexed recipient, uint256 amount);\n\n  // solhint-disable-next-line no-empty-blocks\n  receive() external payable {}\n\n  /**\n   * @notice Change expenditure item.\n   * @param recipient Recipient address.\n   * @param min Minimal balance for payment.\n   * @param target Target balance.\n   */\n  function changeExpenditure(\n    address recipient,\n    uint256 min,\n    uint256 target\n  ) external onlyOwner {\n    require(min <= target, \"Budget::changeExpenditure: minimal balance should be less or equal target balance\");\n    require(recipient != address(0), \"Budget::changeExpenditure: invalid recipient\");\n\n    expenditures[recipient] = Expenditure(recipient, min, target);\n    if (target > 0) {\n      _recipients.add(recipient);\n      require(\n        _recipients.length() <= MAXIMUM_RECIPIENT_COUNT,\n        \"Budget::changeExpenditure: recipient must not exceed maximum count\"\n      );\n    } else {\n      totalSupply -= balanceOf[recipient];\n      balanceOf[recipient] = 0;\n      _recipients.remove(recipient);\n    }\n    emit ExpenditureChanged(recipient, min, target);\n  }\n\n  /**\n   * @notice Transfer ETH to recipient.\n   * @param recipient Recipient.\n   * @param amount Transfer amount.\n   */\n  function transferETH(address payable recipient, uint256 amount) external onlyOwner {\n    require(amount > 0, \"Budget::transferETH: negative or zero amount\");\n    require(recipient != address(0), \"Budget::transferETH: invalid recipient\");\n    require(amount <= address(this).balance - totalSupply, \"Budget::transferETH: transfer amount exceeds balance\");\n\n    recipient.transfer(amount);\n  }\n\n  /**\n   * @notice Return all recipients addresses.\n   * @return Recipients addresses.\n   */\n  function recipients() external view returns (address[] memory) {\n    address[] memory result = new address[](_recipients.length());\n\n    for (uint256 i = 0; i < _recipients.length(); i++) {\n      result[i] = _recipients.at(i);\n    }\n\n    return result;\n  }\n\n  /**\n   * @notice Return balance deficit of recipient.\n   * @param recipient Target recipient.\n   * @return Balance deficit of recipient.\n   */\n  function deficitTo(address recipient) public view returns (uint256) {\n    require(_recipients.contains(recipient), \"Budget::deficitTo: recipient not in expenditure item\");\n\n    uint256 availableBalance = recipient.balance + balanceOf[recipient];\n    if (availableBalance >= expenditures[recipient].min) return 0;\n\n    return expenditures[recipient].target - availableBalance;\n  }\n\n  /**\n   * @notice Return summary balance deficit of all recipients.\n   * @return Summary balance deficit of all recipients.\n   */\n  function deficit() public view returns (uint256) {\n    uint256 result;\n\n    for (uint256 i = 0; i < _recipients.length(); i++) {\n      result += deficitTo(_recipients.at(i));\n    }\n\n    return result;\n  }\n\n  /**\n   * @notice Pay ETH to all recipients with balance deficit.\n   */\n  function pay() external {\n    for (uint256 i = 0; i < _recipients.length(); i++) {\n      uint256 budgetBalance = address(this).balance - totalSupply;\n      address recipient = _recipients.at(i);\n      uint256 amount = deficitTo(recipient);\n      if (amount == 0 || budgetBalance < amount) continue;\n\n      balanceOf[recipient] += amount;\n      totalSupply += amount;\n    }\n  }\n\n  /**\n   * @notice Withdraw ETH to recipient.\n   */\n  function withdraw() external {\n    address payable recipient = payable(_msgSender());\n    uint256 amount = balanceOf[recipient];\n    require(amount > 0, \"Budget::withdraw: transfer amount exceeds balance\");\n\n    balanceOf[recipient] = 0;\n    totalSupply -= amount;\n    recipient.transfer(amount);\n    emit Withdrawal(recipient, amount);\n  }\n}\n"
    },
    "contracts/mock/PriceFeedMock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PriceFeedMock is AggregatorV3Interface, Ownable {\n  uint8 public override decimals;\n\n  string public override description;\n\n  uint256 public override version;\n\n  struct Round {\n    uint80 roundId;\n    int256 answer;\n    uint256 startedAt;\n    uint256 updatedAt;\n    uint80 answeredInRound;\n  }\n\n  mapping(uint80 => Round) internal _rounds;\n\n  uint80 public latestRound;\n\n  constructor(\n    uint8 _decimals,\n    string memory _description,\n    uint256 _version\n  ) {\n    decimals = _decimals;\n    description = _description;\n    version = _version;\n  }\n\n  function addRoundData(int256 answer) external onlyOwner {\n    latestRound++;\n    // solhint-disable-next-line not-rely-on-time\n    _rounds[latestRound] = Round(latestRound, answer, block.timestamp, block.timestamp, latestRound);\n  }\n\n  function getRoundData(uint80 _roundId)\n    public\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    Round storage round = _rounds[_roundId];\n\n    return (round.roundId, round.answer, round.startedAt, round.updatedAt, round.answeredInRound);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    )\n  {\n    return getRoundData(latestRound);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mock/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n  constructor(\n    string memory name,\n    string memory symbol,\n    uint256 initialSupply\n  ) ERC20(name, symbol) {\n    _mint(_msgSender(), initialSupply);\n  }\n\n  function mint(address account, uint256 amount) external {\n    _mint(account, amount);\n  }\n\n  function burn(address account, uint256 amount) external {\n    _burn(account, amount);\n  }\n}\n"
    },
    "contracts/automate/dex/mock/PairMock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../IPair.sol\";\n\ncontract PairMock is IPair, ERC20 {\n  address public override token0;\n\n  address public override token1;\n\n  constructor(address _token0, address _token1) ERC20(\"Pair\", \"P\") {\n    token0 = _token0;\n    token1 = _token1;\n    _mint(msg.sender, 100e18);\n  }\n}\n"
    },
    "contracts/automate/dex/IPair.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IPair is IERC20 {\n  function token0() external view returns (address);\n\n  function token1() external view returns (address);\n}\n"
    },
    "contracts/automate/BuyLiquidity.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"../Storage.sol\";\nimport \"./dex/IPair.sol\";\nimport \"./dex/IRouter.sol\";\n\ninterface IPriceFeed {\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n\ncontract BuyLiquidity is Ownable {\n  /// @notice Storage contract\n  Storage public info;\n\n  /// @notice Treasury contract\n  address payable public treasury;\n\n  /// @notice Fee token to USD price feed contract\n  IPriceFeed public priceFeed;\n\n  struct Swap {\n    address[] path;\n    uint256 outMin;\n  }\n\n  event StorageChanged(address indexed info);\n\n  event TreasuryChanged(address indexed treasury);\n\n  event PriceFeedChanged(address indexed priceFeed);\n\n  constructor(\n    address _info,\n    address payable _terasury,\n    address _priceFeed\n  ) {\n    info = Storage(_info);\n    treasury = _terasury;\n    priceFeed = IPriceFeed(_priceFeed);\n  }\n\n  /**\n   * @notice Change storage contract address.\n   * @param _info New storage contract address.\n   */\n  function changeStorage(address _info) external onlyOwner {\n    info = Storage(_info);\n    emit StorageChanged(_info);\n  }\n\n  /**\n   * @notice Change treasury contract address.\n   * @param _treasury New treasury contract address.\n   */\n  function changeTreasury(address payable _treasury) external onlyOwner {\n    treasury = _treasury;\n    emit TreasuryChanged(treasury);\n  }\n\n  /**\n   * @notice Change price feed contract address.\n   * @param _priceFeed New price feed contract address.\n   */\n  function changePrireFeed(address _priceFeed) external onlyOwner {\n    priceFeed = IPriceFeed(_priceFeed);\n    emit PriceFeedChanged(_priceFeed);\n  }\n\n  function _swap(\n    address router,\n    uint256 amount,\n    uint256 outMin,\n    address[] memory path,\n    uint256 deadline\n  ) internal {\n    if (path[0] == path[path.length - 1]) return;\n\n    IRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n      amount,\n      outMin,\n      path,\n      address(this),\n      deadline\n    );\n  }\n\n  /**\n   * @return Current call commission.\n   */\n  function fee() public view returns (uint256) {\n    uint256 feeUSD = info.getUint(keccak256(\"DFH:Fee:Automate:BuyLiquidity\"));\n    if (feeUSD == 0) return 0;\n\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\n    require(answer > 0, \"BuyLiquidity::fee: invalid fee token price\");\n\n    return (feeUSD * (10**18)) / uint256(answer);\n  }\n\n  function buyLiquidity(\n    uint256 amount,\n    address router,\n    Swap memory swap0,\n    Swap memory swap1,\n    IPair to,\n    uint256 deadline\n  ) external payable {\n    require(\n      info.getBool(keccak256(abi.encodePacked(\"DFH:Contract:BuyLiquidity:allowedRouter:\", router))),\n      \"BuyLiquidity::buyLiquidity: invalid router address\"\n    );\n    require(swap0.path[0] == swap1.path[0], \"BuyLiquidity::buyLiqudity: start token not equals\");\n\n    // Pay commission\n    uint256 payFee = fee();\n    require(msg.value >= payFee, \"BuyLiquidity::buyLiqudity: insufficient funds to pay commission\");\n    treasury.transfer(payFee);\n    if (msg.value > payFee) {\n      payable(msg.sender).transfer(msg.value - payFee);\n    }\n\n    // Get amount\n    address token0 = to.token0();\n    require(swap0.path[swap0.path.length - 1] == token0, \"BuyLiquidity::buyLiqudity: invalid token0\");\n    address token1 = to.token1();\n    require(swap1.path[swap1.path.length - 1] == token1, \"BuyLiquidity::buyLiqudity: invalid token1\");\n    IERC20(swap0.path[0]).transferFrom(msg.sender, address(this), amount);\n    IERC20(swap0.path[0]).approve(router, amount);\n\n    // Swap tokens\n    uint256 amount0In = amount / 2;\n    _swap(router, amount0In, swap0.outMin, swap0.path, deadline);\n    uint256 amount1In = amount - amount0In;\n    _swap(router, amount1In, swap1.outMin, swap1.path, deadline);\n\n    // Add liquidity\n    amount0In = IERC20(token0).balanceOf(address(this));\n    amount1In = IERC20(token1).balanceOf(address(this));\n    IERC20(token0).approve(router, amount0In);\n    IERC20(token1).approve(router, amount1In);\n    IRouter(router).addLiquidity(token0, token1, amount0In, amount1In, 0, 0, msg.sender, deadline);\n\n    // Return remainder\n    uint256 tokenBalance = IERC20(token0).balanceOf(address(this));\n    if (tokenBalance > 0) {\n      IERC20(token0).transfer(msg.sender, tokenBalance);\n    }\n    tokenBalance = IERC20(token1).balanceOf(address(this));\n    if (tokenBalance > 0) {\n      IERC20(token1).transfer(msg.sender, tokenBalance);\n    }\n    tokenBalance = IERC20(swap0.path[0]).balanceOf(address(this));\n    if (tokenBalance > 0) {\n      IERC20(swap0.path[0]).transfer(msg.sender, tokenBalance);\n    }\n  }\n}\n"
    },
    "contracts/Storage.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract Storage is Ownable {\n  /// @dev Bytes storage.\n  mapping(bytes32 => bytes) private _bytes;\n\n  /// @dev Bool storage.\n  mapping(bytes32 => bool) private _bool;\n\n  /// @dev Uint storage.\n  mapping(bytes32 => uint256) private _uint;\n\n  /// @dev Int storage.\n  mapping(bytes32 => int256) private _int;\n\n  /// @dev Address storage.\n  mapping(bytes32 => address) private _address;\n\n  /// @dev String storage.\n  mapping(bytes32 => string) private _string;\n\n  event Updated(bytes32 indexed key);\n\n  /**\n   * @param key The key for the record\n   */\n  function getBytes(bytes32 key) external view returns (bytes memory) {\n    return _bytes[key];\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function getBool(bytes32 key) external view returns (bool) {\n    return _bool[key];\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function getUint(bytes32 key) external view returns (uint256) {\n    return _uint[key];\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function getInt(bytes32 key) external view returns (int256) {\n    return _int[key];\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function getAddress(bytes32 key) external view returns (address) {\n    return _address[key];\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function getString(bytes32 key) external view returns (string memory) {\n    return _string[key];\n  }\n\n  /**\n   * @param key The key for the record\n   * @param value The value to set.\n   */\n  function setBytes(bytes32 key, bytes calldata value) external onlyOwner {\n    _bytes[key] = value;\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   * @param value The value to set.\n   */\n  function setBool(bytes32 key, bool value) external onlyOwner {\n    _bool[key] = value;\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   * @param value The value to set.\n   */\n  function setUint(bytes32 key, uint256 value) external onlyOwner {\n    _uint[key] = value;\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   * @param value The value to set.\n   */\n  function setInt(bytes32 key, int256 value) external onlyOwner {\n    _int[key] = value;\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   * @param value The value to set.\n   */\n  function setAddress(bytes32 key, address value) external onlyOwner {\n    _address[key] = value;\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   * @param value The value to set.\n   */\n  function setString(bytes32 key, string calldata value) external onlyOwner {\n    _string[key] = value;\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function deleteBytes(bytes32 key) external onlyOwner {\n    delete _bytes[key];\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function deleteBool(bytes32 key) external onlyOwner {\n    delete _bool[key];\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function deleteUint(bytes32 key) external onlyOwner {\n    delete _uint[key];\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function deleteInt(bytes32 key) external onlyOwner {\n    delete _int[key];\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function deleteAddress(bytes32 key) external onlyOwner {\n    delete _address[key];\n    emit Updated(key);\n  }\n\n  /**\n   * @param key The key for the record\n   */\n  function deleteString(bytes32 key) external onlyOwner {\n    delete _string[key];\n    emit Updated(key);\n  }\n}\n"
    },
    "contracts/governance/GovernanceToken.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n// solhint-disable const-name-snakecase\n// solhint-disable private-vars-leading-underscore\ncontract GovernanceToken is Ownable {\n  /// @notice EIP-20 token name for this token\n  string public constant name = \"DeFiHelper Governance Token\";\n\n  /// @notice EIP-20 token symbol for this token\n  string public constant symbol = \"DFH\";\n\n  /// @notice EIP-20 token decimals for this token\n  uint8 public constant decimals = 18;\n\n  /// @notice Total number of tokens in circulation\n  uint256 public totalSupply = 1_000_000_000e18; // 1 billion GovernanceToken\n\n  /// @notice Allowance amounts on behalf of others\n  mapping(address => mapping(address => uint96)) internal allowances;\n\n  /// @notice Official record of token balances for each account\n  mapping(address => uint96) internal balances;\n\n  /// @notice A record of each accounts delegate\n  mapping(address => address) public delegates;\n\n  /// @notice A checkpoint for marking number of votes from a given block\n  struct Checkpoint {\n    uint32 fromBlock;\n    uint96 votes;\n  }\n\n  /// @notice A record of votes checkpoints for each account, by index\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n\n  /// @notice The number of checkpoints for each account\n  mapping(address => uint32) public numCheckpoints;\n\n  /// @notice The EIP-712 typehash for the contract's domain\n  bytes32 public constant DOMAIN_TYPEHASH =\n    keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n  /// @notice The EIP-712 typehash for the delegation struct used by the contract\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n  /// @notice A record of states for signing / validating signatures\n  mapping(address => uint256) public nonces;\n\n  /// @notice An event thats emitted when an account changes its delegate\n  event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n  /// @notice An event thats emitted when a delegate account's vote balance changes\n  event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n  /// @notice The standard EIP-20 transfer event\n  event Transfer(address indexed from, address indexed to, uint256 amount);\n\n  /// @notice The standard EIP-20 approval event\n  event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n  /**\n   * @notice Construct a new GovernanceToken token\n   * @param account The initial account to grant all the tokens\n   */\n  constructor(address account) {\n    balances[account] = uint96(totalSupply);\n    emit Transfer(address(0), account, totalSupply);\n  }\n\n  /**\n   * @notice Creates `amount` tokens and assigns them to `account`, increasing\n   * the total supply.\n   *\n   * @param account Recipient of created token.\n   * @param amount Amount of token to be created.\n   */\n  function mint(address account, uint256 amount) public onlyOwner {\n    _mint(account, amount);\n  }\n\n  /**\n   * @param account Owner of removed token.\n   * @param amount Amount of token to be removed.\n   */\n  function burn(address account, uint256 amount) public onlyOwner {\n    _burn(account, amount);\n  }\n\n  /**\n   * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n   * @param account The address of the account holding the funds\n   * @param spender The address of the account spending the funds\n   * @return The number of tokens approved\n   */\n  function allowance(address account, address spender) external view returns (uint256) {\n    return allowances[account][spender];\n  }\n\n  /**\n   * @notice Approve `spender` to transfer up to `amount` from `src`\n   * @dev This will overwrite the approval amount for `spender`\n   *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n   * @param spender The address of the account which may transfer tokens\n   * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n   * @return Whether or not the approval succeeded\n   */\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\n    uint96 amount;\n    if (rawAmount == 2**256 - 1) {\n      amount = 2**96 - 1;\n    } else {\n      amount = safe96(rawAmount, \"GovernanceToken::approve: amount exceeds 96 bits\");\n    }\n\n    allowances[msg.sender][spender] = amount;\n\n    emit Approval(msg.sender, spender, amount);\n    return true;\n  }\n\n  /**\n   * @notice Get the number of tokens held by the `account`\n   * @param account The address of the account to get the balance of\n   * @return The number of tokens held\n   */\n  function balanceOf(address account) external view returns (uint256) {\n    return balances[account];\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n   * @param dst The address of the destination account\n   * @param rawAmount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\n    uint96 amount = safe96(rawAmount, \"GovernanceToken::transfer: amount exceeds 96 bits\");\n    _transferTokens(msg.sender, dst, amount);\n    return true;\n  }\n\n  /**\n   * @notice Transfer `amount` tokens from `src` to `dst`\n   * @param src The address of the source account\n   * @param dst The address of the destination account\n   * @param rawAmount The number of tokens to transfer\n   * @return Whether or not the transfer succeeded\n   */\n  function transferFrom(\n    address src,\n    address dst,\n    uint256 rawAmount\n  ) external returns (bool) {\n    address spender = msg.sender;\n    uint96 spenderAllowance = allowances[src][spender];\n    uint96 amount = safe96(rawAmount, \"GovernanceToken::approve: amount exceeds 96 bits\");\n\n    if (spender != src && spenderAllowance != 2**96 - 1) {\n      uint96 newAllowance = sub96(\n        spenderAllowance,\n        amount,\n        \"GovernanceToken::transferFrom: transfer amount exceeds spender allowance\"\n      );\n      allowances[src][spender] = newAllowance;\n\n      emit Approval(src, spender, newAllowance);\n    }\n\n    _transferTokens(src, dst, amount);\n    return true;\n  }\n\n  /**\n   * @notice Delegate votes from `msg.sender` to `delegatee`\n   * @param delegatee The address to delegate votes to\n   */\n  function delegate(address delegatee) public {\n    return _delegate(msg.sender, delegatee);\n  }\n\n  /**\n   * @notice Delegates votes from signatory to `delegatee`\n   * @param delegatee The address to delegate votes to\n   * @param nonce The contract state required to match the signature\n   * @param expiry The time at which to expire the signature\n   * @param v The recovery byte of the signature\n   * @param r Half of the ECDSA signature pair\n   * @param s Half of the ECDSA signature pair\n   */\n  function delegateBySig(\n    address delegatee,\n    uint256 nonce,\n    uint256 expiry,\n    uint8 v,\n    bytes32 r,\n    bytes32 s\n  ) public {\n    bytes32 domainSeparator = keccak256(\n      abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this))\n    );\n    bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n    bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    address signatory = ecrecover(digest, v, r, s);\n    require(signatory != address(0), \"GovernanceToken::delegateBySig: invalid signature\");\n    require(nonce == nonces[signatory]++, \"GovernanceToken::delegateBySig: invalid nonce\");\n    // solhint-disable-next-line not-rely-on-time\n    require(block.timestamp <= expiry, \"GovernanceToken::delegateBySig: signature expired\");\n    return _delegate(signatory, delegatee);\n  }\n\n  /**\n   * @notice Gets the current votes balance for `account`\n   * @param account The address to get votes balance\n   * @return The number of current votes for `account`\n   */\n  function getCurrentVotes(address account) external view returns (uint96) {\n    uint32 nCheckpoints = numCheckpoints[account];\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n  }\n\n  /**\n   * @notice Determine the prior number of votes for an account as of a block number\n   * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n   * @param account The address of the account to check\n   * @param blockNumber The block number to get the vote balance at\n   * @return The number of votes the account had as of the given block\n   */\n  function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\n    require(blockNumber < block.number, \"GovernanceToken::getPriorVotes: not yet determined\");\n\n    uint32 nCheckpoints = numCheckpoints[account];\n    if (nCheckpoints == 0) {\n      return 0;\n    }\n\n    // First check most recent balance\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n      return checkpoints[account][nCheckpoints - 1].votes;\n    }\n\n    // Next check implicit zero balance\n    if (checkpoints[account][0].fromBlock > blockNumber) {\n      return 0;\n    }\n\n    uint32 lower = 0;\n    uint32 upper = nCheckpoints - 1;\n    while (upper > lower) {\n      uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n      Checkpoint memory cp = checkpoints[account][center];\n      if (cp.fromBlock == blockNumber) {\n        return cp.votes;\n      } else if (cp.fromBlock < blockNumber) {\n        lower = center;\n      } else {\n        upper = center - 1;\n      }\n    }\n    return checkpoints[account][lower].votes;\n  }\n\n  function _delegate(address delegator, address delegatee) internal {\n    address currentDelegate = delegates[delegator];\n    uint96 delegatorBalance = balances[delegator];\n    delegates[delegator] = delegatee;\n\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n  }\n\n  function _transferTokens(\n    address src,\n    address dst,\n    uint96 amount\n  ) internal {\n    require(src != address(0), \"GovernanceToken::_transferTokens: cannot transfer from the zero address\");\n    require(dst != address(0), \"GovernanceToken::_transferTokens: cannot transfer to the zero address\");\n\n    balances[src] = sub96(balances[src], amount, \"GovernanceToken::_transferTokens: transfer amount exceeds balance\");\n    balances[dst] = add96(balances[dst], amount, \"GovernanceToken::_transferTokens: transfer amount overflows\");\n    emit Transfer(src, dst, amount);\n\n    _moveDelegates(delegates[src], delegates[dst], amount);\n  }\n\n  function _moveDelegates(\n    address srcRep,\n    address dstRep,\n    uint96 amount\n  ) internal {\n    if (srcRep != dstRep && amount > 0) {\n      if (srcRep != address(0)) {\n        uint32 srcRepNum = numCheckpoints[srcRep];\n        uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n        uint96 srcRepNew = sub96(srcRepOld, amount, \"GovernanceToken::_moveVotes: vote amount underflows\");\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n      }\n\n      if (dstRep != address(0)) {\n        uint32 dstRepNum = numCheckpoints[dstRep];\n        uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n        uint96 dstRepNew = add96(dstRepOld, amount, \"GovernanceToken::_moveVotes: vote amount overflows\");\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n      }\n    }\n  }\n\n  function _writeCheckpoint(\n    address delegatee,\n    uint32 nCheckpoints,\n    uint96 oldVotes,\n    uint96 newVotes\n  ) internal {\n    uint32 blockNumber = safe32(block.number, \"GovernanceToken::_writeCheckpoint: block number exceeds 32 bits\");\n\n    if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n    } else {\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n      numCheckpoints[delegatee] = nCheckpoints + 1;\n    }\n\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n  }\n\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n\n     * Requirements\n     *\n     * - `account` cannot be the zero address.\n     */\n  function _mint(address account, uint256 rawAmount) internal virtual {\n    require(account != address(0), \"GovernanceToken::_mint: mint to the zero address\");\n    uint96 amount = safe96(rawAmount, \"GovernanceToken::_mint: amount exceeds 96 bits\");\n\n    totalSupply += amount;\n    balances[account] = add96(balances[account], amount, \"GovernanceToken::_mint: mint amount overflows\");\n    emit Transfer(address(0), account, amount);\n  }\n\n  /**\n   * @dev Destroys `amount` tokens from `account`, reducing the\n   * total supply.\n   *\n   * Emits a {Transfer} event with `to` set to the zero address.\n   *\n   * Requirements\n   *\n   * - `account` cannot be the zero address.\n   * - `account` must have at least `amount` tokens.\n   */\n  function _burn(address account, uint256 rawAmount) internal virtual {\n    require(account != address(0), \"GovernanceToken::_burn: burn from the zero address\");\n    uint96 amount = safe96(rawAmount, \"GovernanceToken::_burn: amount exceeds 96 bits\");\n\n    balances[account] = sub96(balances[account], amount, \"GovernanceToken::_burn: burn amount exceeds balance\");\n    totalSupply -= amount;\n    emit Transfer(account, address(0), amount);\n  }\n\n  function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n    require(n < 2**32, errorMessage);\n    return uint32(n);\n  }\n\n  function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\n    require(n < 2**96, errorMessage);\n    return uint96(n);\n  }\n\n  function add96(\n    uint96 a,\n    uint96 b,\n    string memory errorMessage\n  ) internal pure returns (uint96) {\n    uint96 c = a + b;\n    require(c >= a, errorMessage);\n    return c;\n  }\n\n  function sub96(\n    uint96 a,\n    uint96 b,\n    string memory errorMessage\n  ) internal pure returns (uint96) {\n    require(b <= a, errorMessage);\n    return a - b;\n  }\n\n  function getChainId() internal view returns (uint256) {\n    uint256 chainId;\n    // solhint-disable-next-line no-inline-assembly\n    assembly {\n      chainId := chainid()\n    }\n    return chainId;\n  }\n}\n"
    },
    "contracts/investments/Vesting.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.6;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../governance/GovernanceToken.sol\";\n\ncontract Vesting is ReentrancyGuard {\n  /// @notice Is contract initialized.\n  bool public initialized;\n\n  /// @notice Contract owner.\n  address public owner;\n\n  /// @notice Vesting token.\n  GovernanceToken public token;\n\n  /// @notice Block number of rewards distibution period finish.\n  uint256 public periodFinish;\n\n  /// @notice Distribution amount per block.\n  uint256 public rate;\n\n  /// @notice Block number of last claim.\n  uint256 public lastClaim;\n\n  event Initialized(address indexed owner);\n\n  event Distribute(address indexed recipient, uint256 amount, uint256 duration);\n\n  event Claim(uint256 amount);\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(owner == msg.sender, \"Vesting: caller is not the owner\");\n    _;\n  }\n\n  /**\n   * @dev Throws if called not initialized contract.\n   */\n  modifier onlyInitialized() {\n    require(initialized, \"Vesting: contract not initialized\");\n    _;\n  }\n\n  /**\n   * @param _token Vesting token.\n   */\n  function init(address _token) external {\n    require(!initialized, \"Vesting::init: contract already initialized\");\n    initialized = true;\n    owner = tx.origin;\n    token = GovernanceToken(_token);\n    emit Initialized(tx.origin);\n  }\n\n  /**\n   * @notice Start distribution token.\n   * @param recipient Recipient.\n   * @param amount Vesting amount.\n   * @param duration Vesting duration.\n   */\n  function distribute(\n    address recipient,\n    uint256 amount,\n    uint256 duration\n  ) external onlyOwner onlyInitialized {\n    require(recipient != address(0), \"Vesting::distribute: invalid recipient\");\n    require(duration > 0, \"Vesting::distribute: invalid duration\");\n    require(amount > 0, \"Vesting::distribute: invalid amount\");\n    require(periodFinish == 0, \"Vesting::distribute: already distributed\");\n\n    token.transferFrom(msg.sender, address(this), amount);\n    owner = recipient;\n    token.delegate(recipient);\n    rate = amount / duration;\n    periodFinish = block.number + duration;\n    lastClaim = block.number;\n    emit Distribute(recipient, amount, duration);\n  }\n\n  /**\n   * @return Block number of last claim.\n   */\n  function lastTimeRewardApplicable() public view onlyInitialized returns (uint256) {\n    return periodFinish > block.number ? block.number : periodFinish;\n  }\n\n  /**\n   * @return Earned tokens.\n   */\n  function earned() public view onlyInitialized returns (uint256) {\n    return rate * (lastTimeRewardApplicable() - lastClaim);\n  }\n\n  /**\n   * @notice Withdraw token.\n   */\n  function claim() external onlyInitialized nonReentrant onlyOwner {\n    uint256 amount = earned();\n    require(amount > 0, \"Vesting::claim: empty\");\n    lastClaim = lastTimeRewardApplicable();\n    token.transfer(owner, amount);\n    emit Claim(amount);\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}