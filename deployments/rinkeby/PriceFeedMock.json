{
  "name": "PriceFeedMock",
  "address": "0xefC9053c0c8900C9f9790D798D3012e06882af64",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_version",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        }
      ],
      "name": "addRoundData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint80",
          "name": "_roundId",
          "type": "uint80"
        }
      ],
      "name": "getRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRound",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestRoundData",
      "outputs": [
        {
          "internalType": "uint80",
          "name": "roundId",
          "type": "uint80"
        },
        {
          "internalType": "int256",
          "name": "answer",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "startedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "updatedAt",
          "type": "uint256"
        },
        {
          "internalType": "uint80",
          "name": "answeredInRound",
          "type": "uint80"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7daa84175a3fe2326a98dac874aa78a62927ba2a54e2809bfca9df479691b929",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0xefC9053c0c8900C9f9790D798D3012e06882af64",
    "transactionIndex": 6,
    "gasUsed": "489120",
    "logsBloom": "0x
    "blockHash": "0x023bcfa7103d302a01c78be6f5ec97595812aa5da1bad72dfd9e218eb25a3bf0",
    "transactionHash": "0x7daa84175a3fe2326a98dac874aa78a62927ba2a54e2809bfca9df479691b929",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 10617573,
        "transactionHash": "0x7daa84175a3fe2326a98dac874aa78a62927ba2a54e2809bfca9df479691b929",
        "address": "0xefC9053c0c8900C9f9790D798D3012e06882af64",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x",
        "logIndex": 12,
        "blockHash": "0x023bcfa7103d302a01c78be6f5ec97595812aa5da1bad72dfd9e218eb25a3bf0"
      }
    ],
    "blockNumber": 10617573,
    "cumulativeGasUsed": "1479546",
    "status": 1,
    "byzantium": true
  },
  "blockNumber": 10617573,
  "args": [8, "ETH / USD", 3],
  "numDeployments": 1,
  "solcInputHash": "122a58c343b3587af9a14cc097f4390f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_version\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"}],\"name\":\"addRoundData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRound\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mock/PriceFeedMock.sol\":\"PriceFeedMock\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/mock/PriceFeedMock.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract PriceFeedMock is AggregatorV3Interface, Ownable {\\n  uint8 public override decimals;\\n\\n  string public override description;\\n\\n  uint256 public override version;\\n\\n  struct Round {\\n    uint80 roundId;\\n    int256 answer;\\n    uint256 startedAt;\\n    uint256 updatedAt;\\n    uint80 answeredInRound;\\n  }\\n\\n  mapping(uint80 => Round) internal _rounds;\\n\\n  uint80 public latestRound;\\n\\n  constructor(\\n    uint8 _decimals,\\n    string memory _description,\\n    uint256 _version\\n  ) {\\n    decimals = _decimals;\\n    description = _description;\\n    version = _version;\\n  }\\n\\n  function addRoundData(int256 answer) external onlyOwner {\\n    latestRound++;\\n    // solhint-disable-next-line not-rely-on-time\\n    _rounds[latestRound] = Round(latestRound, answer, block.timestamp, block.timestamp, latestRound);\\n  }\\n\\n  function getRoundData(uint80 _roundId)\\n    public\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    Round storage round = _rounds[_roundId];\\n\\n    return (round.roundId, round.answer, round.startedAt, round.updatedAt, round.answeredInRound);\\n  }\\n\\n  function latestRoundData()\\n    external\\n    view\\n    override\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    )\\n  {\\n    return getRoundData(latestRound);\\n  }\\n}\\n\",\"keccak256\":\"0x116cf4a78e44493e6fa7ea2bb515dbac8fab6ba4b6377a8f587db7dbd319ba98\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161091c38038061091c83398101604081905261002f91610158565b6100383361006f565b6000805460ff60a01b1916600160a01b60ff86160217905581516100639060019060208501906100bf565b506002555061029e9050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546100cb9061024d565b90600052602060002090601f0160209004810192826100ed5760008555610133565b82601f1061010657805160ff1916838001178555610133565b82800160010185558215610133579182015b82811115610133578251825591602001919060010190610118565b5061013f929150610143565b5090565b5b8082111561013f5760008155600101610144565b60008060006060848603121561016d57600080fd5b835160ff8116811461017e57600080fd5b602085810151919450906001600160401b038082111561019d57600080fd5b818701915087601f8301126101b157600080fd5b8151818111156101c3576101c3610288565b604051601f8201601f19908116603f011681019083821181831017156101eb576101eb610288565b816040528281528a8684870101111561020357600080fd5b600093505b828410156102255784840186015181850187015292850192610208565b828411156102365760008684830101525b809750505050505050604084015190509250925092565b600181811c9082168061026157607f821691505b6020821081141561028257634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61066f806102ad6000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637284e416116100665780637284e4161461012d5780638da5cb5b146101425780639a6fc8f51461015d578063f2fde38b146101de578063feaf968c146101f157600080fd5b80630f63efaa146100a3578063313ce567146100b857806354fd4d50146100e3578063668a0f02146100fa578063715018a614610125575b600080fd5b6100b66100b13660046104fd565b610231565b005b6000546100cc90600160a01b900460ff1681565b60405160ff90911681526020015b60405180910390f35b6100ec60025481565b6040519081526020016100da565b60045461010d906001600160501b031681565b6040516001600160501b0390911681526020016100da565b6100b661031e565b610135610354565b6040516100da919061053f565b6000546040516001600160a01b0390911681526020016100da565b6101aa61016b366004610516565b6001600160501b039081166000908152600360208190526040909120805460018201546002830154938301546004909301549185169590949190911690565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100da565b6100b66101ec3660046104cd565b6103e2565b600480546001600160501b0390811660009081526003602081905260409091208054600182015460028301549383015492909501549084169493166101aa565b6000546001600160a01b031633146102645760405162461bcd60e51b815260040161025b90610594565b60405180910390fd5b600480546001600160501b031690600061027d83610604565b82546101009290920a6001600160501b038181021990931691831602179091556040805160a08101825260048054841680835260208084019788524284860181815260608601918252608086018481526000948552600393849052969093209451855469ffffffffffffffffffff19908116918916919091178655985160018601559151600285015590519083015591519101805490941691161790915550565b6000546001600160a01b031633146103485760405162461bcd60e51b815260040161025b90610594565b610352600061047d565b565b60018054610361906105c9565b80601f016020809104026020016040519081016040528092919081815260200182805461038d906105c9565b80156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b505050505081565b6000546001600160a01b0316331461040c5760405162461bcd60e51b815260040161025b90610594565b6001600160a01b0381166104715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161025b565b61047a8161047d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104df57600080fd5b81356001600160a01b03811681146104f657600080fd5b9392505050565b60006020828403121561050f57600080fd5b5035919050565b60006020828403121561052857600080fd5b81356001600160501b03811681146104f657600080fd5b600060208083528351808285015260005b8181101561056c57858101830151858201604001528201610550565b8181111561057e576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c908216806105dd57607f821691505b602082108114156105fe57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160501b038083168181141561062f57634e487b7160e01b600052601160045260246000fd5b600101939250505056fea264697066735822122096106d3922e6d3a820697e04cc57102051c28327cfe7464f8b0c7bd89a90336164736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637284e416116100665780637284e4161461012d5780638da5cb5b146101425780639a6fc8f51461015d578063f2fde38b146101de578063feaf968c146101f157600080fd5b80630f63efaa146100a3578063313ce567146100b857806354fd4d50146100e3578063668a0f02146100fa578063715018a614610125575b600080fd5b6100b66100b13660046104fd565b610231565b005b6000546100cc90600160a01b900460ff1681565b60405160ff90911681526020015b60405180910390f35b6100ec60025481565b6040519081526020016100da565b60045461010d906001600160501b031681565b6040516001600160501b0390911681526020016100da565b6100b661031e565b610135610354565b6040516100da919061053f565b6000546040516001600160a01b0390911681526020016100da565b6101aa61016b366004610516565b6001600160501b039081166000908152600360208190526040909120805460018201546002830154938301546004909301549185169590949190911690565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a0016100da565b6100b66101ec3660046104cd565b6103e2565b600480546001600160501b0390811660009081526003602081905260409091208054600182015460028301549383015492909501549084169493166101aa565b6000546001600160a01b031633146102645760405162461bcd60e51b815260040161025b90610594565b60405180910390fd5b600480546001600160501b031690600061027d83610604565b82546101009290920a6001600160501b038181021990931691831602179091556040805160a08101825260048054841680835260208084019788524284860181815260608601918252608086018481526000948552600393849052969093209451855469ffffffffffffffffffff19908116918916919091178655985160018601559151600285015590519083015591519101805490941691161790915550565b6000546001600160a01b031633146103485760405162461bcd60e51b815260040161025b90610594565b610352600061047d565b565b60018054610361906105c9565b80601f016020809104026020016040519081016040528092919081815260200182805461038d906105c9565b80156103da5780601f106103af576101008083540402835291602001916103da565b820191906000526020600020905b8154815290600101906020018083116103bd57829003601f168201915b505050505081565b6000546001600160a01b0316331461040c5760405162461bcd60e51b815260040161025b90610594565b6001600160a01b0381166104715760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161025b565b61047a8161047d565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104df57600080fd5b81356001600160a01b03811681146104f657600080fd5b9392505050565b60006020828403121561050f57600080fd5b5035919050565b60006020828403121561052857600080fd5b81356001600160501b03811681146104f657600080fd5b600060208083528351808285015260005b8181101561056c57858101830151858201604001528201610550565b8181111561057e576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600181811c908216806105dd57607f821691505b602082108114156105fe57634e487b7160e01b600052602260045260246000fd5b50919050565b60006001600160501b038083168181141561062f57634e487b7160e01b600052601160045260246000fd5b600101939250505056fea264697066735822122096106d3922e6d3a820697e04cc57102051c28327cfe7464f8b0c7bd89a90336164736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6705,
        "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
        "label": "decimals",
        "offset": 20,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 6708,
        "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
        "label": "description",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 6711,
        "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
        "label": "version",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6727,
        "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
        "label": "_rounds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint80,t_struct(Round)6722_storage)"
      },
      {
        "astId": 6729,
        "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
        "label": "latestRound",
        "offset": 0,
        "slot": "4",
        "type": "t_uint80"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint80,t_struct(Round)6722_storage)": {
        "encoding": "mapping",
        "key": "t_uint80",
        "label": "mapping(uint80 => struct PriceFeedMock.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)6722_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Round)6722_storage": {
        "encoding": "inplace",
        "label": "struct PriceFeedMock.Round",
        "members": [
          {
            "astId": 6713,
            "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
            "label": "roundId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint80"
          },
          {
            "astId": 6715,
            "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
            "label": "answer",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 6717,
            "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
            "label": "startedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6719,
            "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
            "label": "updatedAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6721,
            "contract": "contracts/mock/PriceFeedMock.sol:PriceFeedMock",
            "label": "answeredInRound",
            "offset": 0,
            "slot": "4",
            "type": "t_uint80"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      },
      "t_uint80": {
        "encoding": "inplace",
        "label": "uint80",
        "numberOfBytes": "10"
      }
    }
  }
}
