{
  "name": "BuyLiquidity",
  "address": "0x87b9C47Ce045CF665FdeC1203E48235a97f03f1a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "_terasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "PriceFeedChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "info",
          "type": "address"
        }
      ],
      "name": "StorageChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        }
      ],
      "name": "TreasuryChanged",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct BuyLiquidity.Swap",
          "name": "swap0",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outMin",
              "type": "uint256"
            }
          ],
          "internalType": "struct BuyLiquidity.Swap",
          "name": "swap1",
          "type": "tuple"
        },
        {
          "internalType": "contract IPair",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "buyLiquidity",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "changePrireFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_info",
          "type": "address"
        }
      ],
      "name": "changeStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "changeTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "info",
      "outputs": [
        {
          "internalType": "contract Storage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract IPriceFeed",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x518e03be81c421f3fa420f384277fb16551f6de4533765c358af2c542893f480",
  "receipt": {
    "to": null,
    "from": "0xFa02EDF9ebA53Ae811650e409A1da2E6103CDB54",
    "contractAddress": "0x87b9C47Ce045CF665FdeC1203E48235a97f03f1a",
    "transactionIndex": 11,
    "gasUsed": "1467091",
    "logsBloom": "0x
    "blockHash": "0xcca080034d0915767a0aa2d8546945645f565a5fbba75506788e696e38441879",
    "transactionHash": "0x518e03be81c421f3fa420f384277fb16551f6de4533765c358af2c542893f480",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10617617,
        "transactionHash": "0x518e03be81c421f3fa420f384277fb16551f6de4533765c358af2c542893f480",
        "address": "0x87b9C47Ce045CF665FdeC1203E48235a97f03f1a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000fa02edf9eba53ae811650e409a1da2e6103cdb54"
        ],
        "data": "0x",
        "logIndex": 16,
        "blockHash": "0xcca080034d0915767a0aa2d8546945645f565a5fbba75506788e696e38441879"
      }
    ],
    "blockNumber": 10617617,
    "cumulativeGasUsed": "2230798",
    "status": 1,
    "byzantium": true
  },
  "blockNumber": 10617617,
  "args": [
    "0x5b9c40903499EC509C5b60E7360D84F0Dd17E25e",
    "0x52a452C050F72B3D402F51d7916e748558e48285",
    "0x0000000000000000000000000000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "122a58c343b3587af9a14cc097f4390f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_terasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"PriceFeedChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"info\",\"type\":\"address\"}],\"name\":\"StorageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"}],\"name\":\"TreasuryChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyLiquidity.Swap\",\"name\":\"swap0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outMin\",\"type\":\"uint256\"}],\"internalType\":\"struct BuyLiquidity.Swap\",\"name\":\"swap1\",\"type\":\"tuple\"},{\"internalType\":\"contract IPair\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"buyLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"changePrireFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_info\",\"type\":\"address\"}],\"name\":\"changeStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"changeTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"info\",\"outputs\":[{\"internalType\":\"contract Storage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"changePrireFeed(address)\":{\"params\":{\"_priceFeed\":\"New price feed contract address.\"}},\"changeStorage(address)\":{\"params\":{\"_info\":\"New storage contract address.\"}},\"changeTreasury(address)\":{\"params\":{\"_treasury\":\"New treasury contract address.\"}},\"fee()\":{\"returns\":{\"_0\":\"Current call commission.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changePrireFeed(address)\":{\"notice\":\"Change price feed contract address.\"},\"changeStorage(address)\":{\"notice\":\"Change storage contract address.\"},\"changeTreasury(address)\":{\"notice\":\"Change treasury contract address.\"},\"info()\":{\"notice\":\"Storage contract\"},\"priceFeed()\":{\"notice\":\"Fee token to USD price feed contract\"},\"treasury()\":{\"notice\":\"Treasury contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/automate/BuyLiquidity.sol\":\"BuyLiquidity\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/Storage.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Storage is Ownable {\\n  /// @dev Bytes storage.\\n  mapping(bytes32 => bytes) private _bytes;\\n\\n  /// @dev Bool storage.\\n  mapping(bytes32 => bool) private _bool;\\n\\n  /// @dev Uint storage.\\n  mapping(bytes32 => uint256) private _uint;\\n\\n  /// @dev Int storage.\\n  mapping(bytes32 => int256) private _int;\\n\\n  /// @dev Address storage.\\n  mapping(bytes32 => address) private _address;\\n\\n  /// @dev String storage.\\n  mapping(bytes32 => string) private _string;\\n\\n  event Updated(bytes32 indexed key);\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getBytes(bytes32 key) external view returns (bytes memory) {\\n    return _bytes[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getBool(bytes32 key) external view returns (bool) {\\n    return _bool[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getUint(bytes32 key) external view returns (uint256) {\\n    return _uint[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getInt(bytes32 key) external view returns (int256) {\\n    return _int[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getAddress(bytes32 key) external view returns (address) {\\n    return _address[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function getString(bytes32 key) external view returns (string memory) {\\n    return _string[key];\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setBytes(bytes32 key, bytes calldata value) external onlyOwner {\\n    _bytes[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setBool(bytes32 key, bool value) external onlyOwner {\\n    _bool[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setUint(bytes32 key, uint256 value) external onlyOwner {\\n    _uint[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setInt(bytes32 key, int256 value) external onlyOwner {\\n    _int[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setAddress(bytes32 key, address value) external onlyOwner {\\n    _address[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   * @param value The value to set.\\n   */\\n  function setString(bytes32 key, string calldata value) external onlyOwner {\\n    _string[key] = value;\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteBytes(bytes32 key) external onlyOwner {\\n    delete _bytes[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteBool(bytes32 key) external onlyOwner {\\n    delete _bool[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteUint(bytes32 key) external onlyOwner {\\n    delete _uint[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteInt(bytes32 key) external onlyOwner {\\n    delete _int[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteAddress(bytes32 key) external onlyOwner {\\n    delete _address[key];\\n    emit Updated(key);\\n  }\\n\\n  /**\\n   * @param key The key for the record\\n   */\\n  function deleteString(bytes32 key) external onlyOwner {\\n    delete _string[key];\\n    emit Updated(key);\\n  }\\n}\\n\",\"keccak256\":\"0xeec1b882d840aaf23bbcb6f67f4b1e265675dad434ec0c4ac09a1a4d2bf677f5\",\"license\":\"BSD-3-Clause\"},\"contracts/automate/BuyLiquidity.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../Storage.sol\\\";\\nimport \\\"./dex/IPair.sol\\\";\\nimport \\\"./dex/IRouter.sol\\\";\\n\\ninterface IPriceFeed {\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\\ncontract BuyLiquidity is Ownable {\\n  /// @notice Storage contract\\n  Storage public info;\\n\\n  /// @notice Treasury contract\\n  address payable public treasury;\\n\\n  /// @notice Fee token to USD price feed contract\\n  IPriceFeed public priceFeed;\\n\\n  struct Swap {\\n    address[] path;\\n    uint256 outMin;\\n  }\\n\\n  event StorageChanged(address indexed info);\\n\\n  event TreasuryChanged(address indexed treasury);\\n\\n  event PriceFeedChanged(address indexed priceFeed);\\n\\n  constructor(\\n    address _info,\\n    address payable _terasury,\\n    address _priceFeed\\n  ) {\\n    info = Storage(_info);\\n    treasury = _terasury;\\n    priceFeed = IPriceFeed(_priceFeed);\\n  }\\n\\n  /**\\n   * @notice Change storage contract address.\\n   * @param _info New storage contract address.\\n   */\\n  function changeStorage(address _info) external onlyOwner {\\n    info = Storage(_info);\\n    emit StorageChanged(_info);\\n  }\\n\\n  /**\\n   * @notice Change treasury contract address.\\n   * @param _treasury New treasury contract address.\\n   */\\n  function changeTreasury(address payable _treasury) external onlyOwner {\\n    treasury = _treasury;\\n    emit TreasuryChanged(treasury);\\n  }\\n\\n  /**\\n   * @notice Change price feed contract address.\\n   * @param _priceFeed New price feed contract address.\\n   */\\n  function changePrireFeed(address _priceFeed) external onlyOwner {\\n    priceFeed = IPriceFeed(_priceFeed);\\n    emit PriceFeedChanged(_priceFeed);\\n  }\\n\\n  function _swap(\\n    address router,\\n    uint256 amount,\\n    uint256 outMin,\\n    address[] memory path,\\n    uint256 deadline\\n  ) internal {\\n    if (path[0] == path[path.length - 1]) return;\\n\\n    IRouter(router).swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n      amount,\\n      outMin,\\n      path,\\n      address(this),\\n      deadline\\n    );\\n  }\\n\\n  /**\\n   * @return Current call commission.\\n   */\\n  function fee() public view returns (uint256) {\\n    uint256 feeUSD = info.getUint(keccak256(\\\"DFH:Fee:Automate:BuyLiquidity\\\"));\\n    if (feeUSD == 0) return 0;\\n\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    require(answer > 0, \\\"BuyLiquidity::fee: invalid fee token price\\\");\\n\\n    return (feeUSD * (10**18)) / uint256(answer);\\n  }\\n\\n  function buyLiquidity(\\n    uint256 amount,\\n    address router,\\n    Swap memory swap0,\\n    Swap memory swap1,\\n    IPair to,\\n    uint256 deadline\\n  ) external payable {\\n    require(\\n      info.getBool(keccak256(abi.encodePacked(\\\"DFH:Contract:BuyLiquidity:allowedRouter:\\\", router))),\\n      \\\"BuyLiquidity::buyLiquidity: invalid router address\\\"\\n    );\\n    require(swap0.path[0] == swap1.path[0], \\\"BuyLiquidity::buyLiqudity: start token not equals\\\");\\n\\n    // Pay commission\\n    uint256 payFee = fee();\\n    require(msg.value >= payFee, \\\"BuyLiquidity::buyLiqudity: insufficient funds to pay commission\\\");\\n    treasury.transfer(payFee);\\n    if (msg.value > payFee) {\\n      payable(msg.sender).transfer(msg.value - payFee);\\n    }\\n\\n    // Get amount\\n    address token0 = to.token0();\\n    require(swap0.path[swap0.path.length - 1] == token0, \\\"BuyLiquidity::buyLiqudity: invalid token0\\\");\\n    address token1 = to.token1();\\n    require(swap1.path[swap1.path.length - 1] == token1, \\\"BuyLiquidity::buyLiqudity: invalid token1\\\");\\n    IERC20(swap0.path[0]).transferFrom(msg.sender, address(this), amount);\\n    IERC20(swap0.path[0]).approve(router, amount);\\n\\n    // Swap tokens\\n    uint256 amount0In = amount / 2;\\n    _swap(router, amount0In, swap0.outMin, swap0.path, deadline);\\n    uint256 amount1In = amount - amount0In;\\n    _swap(router, amount1In, swap1.outMin, swap1.path, deadline);\\n\\n    // Add liquidity\\n    amount0In = IERC20(token0).balanceOf(address(this));\\n    amount1In = IERC20(token1).balanceOf(address(this));\\n    IERC20(token0).approve(router, amount0In);\\n    IERC20(token1).approve(router, amount1In);\\n    IRouter(router).addLiquidity(token0, token1, amount0In, amount1In, 0, 0, msg.sender, deadline);\\n\\n    // Return remainder\\n    uint256 tokenBalance = IERC20(token0).balanceOf(address(this));\\n    if (tokenBalance > 0) {\\n      IERC20(token0).transfer(msg.sender, tokenBalance);\\n    }\\n    tokenBalance = IERC20(token1).balanceOf(address(this));\\n    if (tokenBalance > 0) {\\n      IERC20(token1).transfer(msg.sender, tokenBalance);\\n    }\\n    tokenBalance = IERC20(swap0.path[0]).balanceOf(address(this));\\n    if (tokenBalance > 0) {\\n      IERC20(swap0.path[0]).transfer(msg.sender, tokenBalance);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xc142e39534a5424f0d9469be075d01a98fca18913bfab023d400002c29277502\",\"license\":\"BSD-3-Clause\"},\"contracts/automate/dex/IPair.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPair is IERC20 {\\n  function token0() external view returns (address);\\n\\n  function token1() external view returns (address);\\n}\\n\",\"keccak256\":\"0x406c40f23bdba65871297c67385d2d54e004b362495adc74d0ea528377758ab5\",\"license\":\"BSD-3-Clause\"},\"contracts/automate/dex/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.6;\\n\\ninterface IRouter {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n\\n  function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external;\\n\\n  function addLiquidity(\\n    address tokenA,\\n    address tokenB,\\n    uint256 amountADesired,\\n    uint256 amountBDesired,\\n    uint256 amountAMin,\\n    uint256 amountBMin,\\n    address to,\\n    uint256 deadline\\n  )\\n    external\\n    returns (\\n      uint256 amountA,\\n      uint256 amountB,\\n      uint256 liquidity\\n    );\\n\\n  function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x4dc518c8b3b59675fd08edd30f2e70b5bb46d7e3d51d8b716780343ac1c6aa32\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001984380380620019848339810160408190526200003491620000d2565b6200003f3362000082565b600180546001600160a01b039485166001600160a01b0319918216179091556002805493851693821693909317909255600380549190931691161790556200013f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080600060608486031215620000e857600080fd5b8351620000f58162000126565b6020850151909350620001088162000126565b60408501519092506200011b8162000126565b809150509250925092565b6001600160a01b03811681146200013c57600080fd5b50565b611835806200014f6000396000f3fe60806040526004361061009c5760003560e01c8063741bef1a11610064578063741bef1a146101485780638da5cb5b14610168578063b14f2a3914610186578063c50c97d0146101a6578063ddca3f43146101c6578063f2fde38b146101e957600080fd5b8063370158ea146100a15780633c65f2d1146100de57806361d027b3146101005780636a103af714610120578063715018a614610133575b600080fd5b3480156100ad57600080fd5b506001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ea57600080fd5b506100fe6100f93660046114b9565b610209565b005b34801561010c57600080fd5b506002546100c1906001600160a01b031681565b6100fe61012e366004611535565b610286565b34801561013f57600080fd5b506100fe610f3c565b34801561015457600080fd5b506003546100c1906001600160a01b031681565b34801561017457600080fd5b506000546001600160a01b03166100c1565b34801561019257600080fd5b506100fe6101a13660046114b9565b610f72565b3480156101b257600080fd5b506100fe6101c13660046114b9565b610fe6565b3480156101d257600080fd5b506101db61105a565b6040519081526020016100d5565b3480156101f557600080fd5b506100fe6102043660046114b9565b611213565b6000546001600160a01b0316331461023c5760405162461bcd60e51b815260040161023390611650565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f70880247142cf113e15f57599afcb48f4cdd196159d882cda54475da68ea996190600090a250565b600154604080517f4446483a436f6e74726163743a4275794c69717569646974793a616c6c6f7765602082015267322937baba32b91d60c11b918101919091526bffffffffffffffffffffffff19606088901b1660488201526001600160a01b0390911690637ae1cfca90605c01604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161032891815260200190565b60206040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037891906114fa565b6103df5760405162461bcd60e51b815260206004820152603260248201527f4275794c69717569646974793a3a6275794c69717569646974793a20696e76616044820152716c696420726f75746572206164647265737360701b6064820152608401610233565b825180516000906103f2576103f26117be565b60200260200101516001600160a01b0316846000015160008151811061041a5761041a6117be565b60200260200101516001600160a01b0316146104925760405162461bcd60e51b815260206004820152603160248201527f4275794c69717569646974793a3a6275794c697175646974793a20737461727460448201527020746f6b656e206e6f7420657175616c7360781b6064820152608401610233565b600061049c61105a565b9050803410156105145760405162461bcd60e51b815260206004820152603f60248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e73756660448201527f66696369656e742066756e647320746f2070617920636f6d6d697373696f6e006064820152608401610233565b6002546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561054e573d6000803e3d6000fd5b508034111561058f57336108fc6105658334611791565b6040518115909202916000818181858888f1935050505015801561058d573d6000803e3d6000fd5b505b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060291906114dd565b865180519192506001600160a01b0383169161062090600190611791565b81518110610630576106306117be565b60200260200101516001600160a01b0316146106a05760405162461bcd60e51b815260206004820152602960248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e76616c6044820152680696420746f6b656e360bc1b6064820152608401610233565b6000846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106db57600080fd5b505afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906114dd565b865180519192506001600160a01b0383169161073190600190611791565b81518110610741576107416117be565b60200260200101516001600160a01b0316146107b15760405162461bcd60e51b815260206004820152602960248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e76616c604482015268696420746f6b656e3160b81b6064820152608401610233565b865180516000906107c4576107c46117be565b60209081029190910101516040516323b872dd60e01b8152336004820152306024820152604481018b90526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085691906114fa565b508651805160009061086a5761086a6117be565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038a81166004830152602482018c90529091169063095ea7b390604401602060405180830381600087803b1580156108c057600080fd5b505af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f891906114fa565b50600061090660028b611750565b905061091d89828a602001518b60000151896112ae565b6000610929828c611791565b90506109408a828a602001518b600001518a6112ae565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b7919061151c565b6040516370a0823160e01b81523060048201529092506001600160a01b038416906370a082319060240160206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a31919061151c565b60405163095ea7b360e01b81526001600160a01b038c81166004830152602482018590529192509085169063095ea7b390604401602060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab791906114fa565b5060405163095ea7b360e01b81526001600160a01b038b811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b158015610b0257600080fd5b505af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a91906114fa565b5060405162e8e33760e81b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260006084830181905260a48301523360c483015260e482018890528b169063e8e337009061010401606060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906115d2565b50506040516370a0823160e01b8152306004820152600091506001600160a01b038616906370a082319060240160206040518083038186803b158015610c2c57600080fd5b505afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c64919061151c565b90508015610cee5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0386169063a9059cbb90604401602060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec91906114fa565b505b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d65919061151c565b90508015610def5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0385169063a9059cbb90604401602060405180830381600087803b158015610db557600080fd5b505af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded91906114fa565b505b89518051600090610e0257610e026117be565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610e4d57600080fd5b505afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e85919061151c565b90508015610f2e5789518051600090610ea057610ea06117be565b602090810291909101015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610ef457600080fd5b505af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906114fa565b505b505050505050505050505050565b6000546001600160a01b03163314610f665760405162461bcd60e51b815260040161023390611650565b610f70600061137b565b565b6000546001600160a01b03163314610f9c5760405162461bcd60e51b815260040161023390611650565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890600090a250565b6000546001600160a01b031633146110105760405162461bcd60e51b815260040161023390611650565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cbb7a6ee88dbf214a9b660a9f1af063e42a24cbfe26a046a718b3f621baa53990600090a250565b60015460405163bd02d0f560e01b81527fed3a30f9a1639759f8c23859293de095ace4c3da0699fccc56863cec92430bf1600482015260009182916001600160a01b039091169063bd02d0f59060240160206040518083038186803b1580156110c257600080fd5b505afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa919061151c565b90508061110957600091505090565b60035460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561114e57600080fd5b505afa158015611162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111869190611600565b505050915050600081136111ef5760405162461bcd60e51b815260206004820152602a60248201527f4275794c69717569646974793a3a6665653a20696e76616c69642066656520746044820152696f6b656e20707269636560b01b6064820152608401610233565b8061120283670de0b6b3a7640000611772565b61120c9190611750565b9250505090565b6000546001600160a01b0316331461123d5760405162461bcd60e51b815260040161023390611650565b6001600160a01b0381166112a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610233565b6112ab8161137b565b50565b81600183516112bd9190611791565b815181106112cd576112cd6117be565b60200260200101516001600160a01b0316826000815181106112f1576112f16117be565b60200260200101516001600160a01b0316141561130d57611374565b604051635c11d79560e01b81526001600160a01b03861690635c11d795906113419087908790879030908890600401611685565b600060405180830381600087803b15801561135b57600080fd5b505af115801561136f573d6000803e3d6000fd5b505050505b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604082840312156113dd57600080fd5b6113e56116f6565b9050813567ffffffffffffffff808211156113ff57600080fd5b818401915084601f83011261141357600080fd5b8135602082821115611427576114276117d4565b8160051b925061143881840161171f565b8281528181019085830185870184018a101561145357600080fd5b600096505b84871015611482578035955061146d866117ea565b85835260019690960195918301918301611458565b50808752505080860135818601525050505092915050565b805169ffffffffffffffffffff811681146114b457600080fd5b919050565b6000602082840312156114cb57600080fd5b81356114d6816117ea565b9392505050565b6000602082840312156114ef57600080fd5b81516114d6816117ea565b60006020828403121561150c57600080fd5b815180151581146114d657600080fd5b60006020828403121561152e57600080fd5b5051919050565b60008060008060008060c0878903121561154e57600080fd5b863595506020870135611560816117ea565b9450604087013567ffffffffffffffff8082111561157d57600080fd5b6115898a838b016113cb565b9550606089013591508082111561159f57600080fd5b506115ac89828a016113cb565b93505060808701356115bd816117ea565b8092505060a087013590509295509295509295565b6000806000606084860312156115e757600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a0868803121561161857600080fd5b6116218661149a565b94506020860151935060408601519250606086015191506116446080870161149a565b90509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156116d55784516001600160a01b0316835293830193918301916001016116b0565b50506001600160a01b03969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715611719576117196117d4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611748576117486117d4565b604052919050565b60008261176d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561178c5761178c6117a8565b500290565b6000828210156117a3576117a36117a8565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112ab57600080fdfea264697066735822122031c3e596a5f951dcc18be52d7af22bb70b51e2526f8dec95529fef9d82d5506664736f6c63430008060033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063741bef1a11610064578063741bef1a146101485780638da5cb5b14610168578063b14f2a3914610186578063c50c97d0146101a6578063ddca3f43146101c6578063f2fde38b146101e957600080fd5b8063370158ea146100a15780633c65f2d1146100de57806361d027b3146101005780636a103af714610120578063715018a614610133575b600080fd5b3480156100ad57600080fd5b506001546100c1906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100ea57600080fd5b506100fe6100f93660046114b9565b610209565b005b34801561010c57600080fd5b506002546100c1906001600160a01b031681565b6100fe61012e366004611535565b610286565b34801561013f57600080fd5b506100fe610f3c565b34801561015457600080fd5b506003546100c1906001600160a01b031681565b34801561017457600080fd5b506000546001600160a01b03166100c1565b34801561019257600080fd5b506100fe6101a13660046114b9565b610f72565b3480156101b257600080fd5b506100fe6101c13660046114b9565b610fe6565b3480156101d257600080fd5b506101db61105a565b6040519081526020016100d5565b3480156101f557600080fd5b506100fe6102043660046114b9565b611213565b6000546001600160a01b0316331461023c5760405162461bcd60e51b815260040161023390611650565b60405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f70880247142cf113e15f57599afcb48f4cdd196159d882cda54475da68ea996190600090a250565b600154604080517f4446483a436f6e74726163743a4275794c69717569646974793a616c6c6f7765602082015267322937baba32b91d60c11b918101919091526bffffffffffffffffffffffff19606088901b1660488201526001600160a01b0390911690637ae1cfca90605c01604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161032891815260200190565b60206040518083038186803b15801561034057600080fd5b505afa158015610354573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037891906114fa565b6103df5760405162461bcd60e51b815260206004820152603260248201527f4275794c69717569646974793a3a6275794c69717569646974793a20696e76616044820152716c696420726f75746572206164647265737360701b6064820152608401610233565b825180516000906103f2576103f26117be565b60200260200101516001600160a01b0316846000015160008151811061041a5761041a6117be565b60200260200101516001600160a01b0316146104925760405162461bcd60e51b815260206004820152603160248201527f4275794c69717569646974793a3a6275794c697175646974793a20737461727460448201527020746f6b656e206e6f7420657175616c7360781b6064820152608401610233565b600061049c61105a565b9050803410156105145760405162461bcd60e51b815260206004820152603f60248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e73756660448201527f66696369656e742066756e647320746f2070617920636f6d6d697373696f6e006064820152608401610233565b6002546040516001600160a01b039091169082156108fc029083906000818181858888f1935050505015801561054e573d6000803e3d6000fd5b508034111561058f57336108fc6105658334611791565b6040518115909202916000818181858888f1935050505015801561058d573d6000803e3d6000fd5b505b6000836001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b1580156105ca57600080fd5b505afa1580156105de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060291906114dd565b865180519192506001600160a01b0383169161062090600190611791565b81518110610630576106306117be565b60200260200101516001600160a01b0316146106a05760405162461bcd60e51b815260206004820152602960248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e76616c6044820152680696420746f6b656e360bc1b6064820152608401610233565b6000846001600160a01b031663d21220a76040518163ffffffff1660e01b815260040160206040518083038186803b1580156106db57600080fd5b505afa1580156106ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071391906114dd565b865180519192506001600160a01b0383169161073190600190611791565b81518110610741576107416117be565b60200260200101516001600160a01b0316146107b15760405162461bcd60e51b815260206004820152602960248201527f4275794c69717569646974793a3a6275794c697175646974793a20696e76616c604482015268696420746f6b656e3160b81b6064820152608401610233565b865180516000906107c4576107c46117be565b60209081029190910101516040516323b872dd60e01b8152336004820152306024820152604481018b90526001600160a01b03909116906323b872dd90606401602060405180830381600087803b15801561081e57600080fd5b505af1158015610832573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085691906114fa565b508651805160009061086a5761086a6117be565b602090810291909101015160405163095ea7b360e01b81526001600160a01b038a81166004830152602482018c90529091169063095ea7b390604401602060405180830381600087803b1580156108c057600080fd5b505af11580156108d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f891906114fa565b50600061090660028b611750565b905061091d89828a602001518b60000151896112ae565b6000610929828c611791565b90506109408a828a602001518b600001518a6112ae565b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b15801561097f57600080fd5b505afa158015610993573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b7919061151c565b6040516370a0823160e01b81523060048201529092506001600160a01b038416906370a082319060240160206040518083038186803b1580156109f957600080fd5b505afa158015610a0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a31919061151c565b60405163095ea7b360e01b81526001600160a01b038c81166004830152602482018590529192509085169063095ea7b390604401602060405180830381600087803b158015610a7f57600080fd5b505af1158015610a93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab791906114fa565b5060405163095ea7b360e01b81526001600160a01b038b811660048301526024820183905284169063095ea7b390604401602060405180830381600087803b158015610b0257600080fd5b505af1158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a91906114fa565b5060405162e8e33760e81b81526001600160a01b0385811660048301528481166024830152604482018490526064820183905260006084830181905260a48301523360c483015260e482018890528b169063e8e337009061010401606060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906115d2565b50506040516370a0823160e01b8152306004820152600091506001600160a01b038616906370a082319060240160206040518083038186803b158015610c2c57600080fd5b505afa158015610c40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c64919061151c565b90508015610cee5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0386169063a9059cbb90604401602060405180830381600087803b158015610cb457600080fd5b505af1158015610cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cec91906114fa565b505b6040516370a0823160e01b81523060048201526001600160a01b038516906370a082319060240160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d65919061151c565b90508015610def5760405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0385169063a9059cbb90604401602060405180830381600087803b158015610db557600080fd5b505af1158015610dc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ded91906114fa565b505b89518051600090610e0257610e026117be565b60209081029190910101516040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610e4d57600080fd5b505afa158015610e61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e85919061151c565b90508015610f2e5789518051600090610ea057610ea06117be565b602090810291909101015160405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb90604401602060405180830381600087803b158015610ef457600080fd5b505af1158015610f08573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2c91906114fa565b505b505050505050505050505050565b6000546001600160a01b03163314610f665760405162461bcd60e51b815260040161023390611650565b610f70600061137b565b565b6000546001600160a01b03163314610f9c5760405162461bcd60e51b815260040161023390611650565b600280546001600160a01b0319166001600160a01b0383169081179091556040517fc714d22a2f08b695f81e7c707058db484aa5b4d6b4c9fd64beb10fe85832f60890600090a250565b6000546001600160a01b031633146110105760405162461bcd60e51b815260040161023390611650565b600180546001600160a01b0319166001600160a01b0383169081179091556040517f8cbb7a6ee88dbf214a9b660a9f1af063e42a24cbfe26a046a718b3f621baa53990600090a250565b60015460405163bd02d0f560e01b81527fed3a30f9a1639759f8c23859293de095ace4c3da0699fccc56863cec92430bf1600482015260009182916001600160a01b039091169063bd02d0f59060240160206040518083038186803b1580156110c257600080fd5b505afa1580156110d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fa919061151c565b90508061110957600091505090565b60035460408051633fabe5a360e21b815290516000926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b15801561114e57600080fd5b505afa158015611162573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111869190611600565b505050915050600081136111ef5760405162461bcd60e51b815260206004820152602a60248201527f4275794c69717569646974793a3a6665653a20696e76616c69642066656520746044820152696f6b656e20707269636560b01b6064820152608401610233565b8061120283670de0b6b3a7640000611772565b61120c9190611750565b9250505090565b6000546001600160a01b0316331461123d5760405162461bcd60e51b815260040161023390611650565b6001600160a01b0381166112a25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610233565b6112ab8161137b565b50565b81600183516112bd9190611791565b815181106112cd576112cd6117be565b60200260200101516001600160a01b0316826000815181106112f1576112f16117be565b60200260200101516001600160a01b0316141561130d57611374565b604051635c11d79560e01b81526001600160a01b03861690635c11d795906113419087908790879030908890600401611685565b600060405180830381600087803b15801561135b57600080fd5b505af115801561136f573d6000803e3d6000fd5b505050505b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000604082840312156113dd57600080fd5b6113e56116f6565b9050813567ffffffffffffffff808211156113ff57600080fd5b818401915084601f83011261141357600080fd5b8135602082821115611427576114276117d4565b8160051b925061143881840161171f565b8281528181019085830185870184018a101561145357600080fd5b600096505b84871015611482578035955061146d866117ea565b85835260019690960195918301918301611458565b50808752505080860135818601525050505092915050565b805169ffffffffffffffffffff811681146114b457600080fd5b919050565b6000602082840312156114cb57600080fd5b81356114d6816117ea565b9392505050565b6000602082840312156114ef57600080fd5b81516114d6816117ea565b60006020828403121561150c57600080fd5b815180151581146114d657600080fd5b60006020828403121561152e57600080fd5b5051919050565b60008060008060008060c0878903121561154e57600080fd5b863595506020870135611560816117ea565b9450604087013567ffffffffffffffff8082111561157d57600080fd5b6115898a838b016113cb565b9550606089013591508082111561159f57600080fd5b506115ac89828a016113cb565b93505060808701356115bd816117ea565b8092505060a087013590509295509295509295565b6000806000606084860312156115e757600080fd5b8351925060208401519150604084015190509250925092565b600080600080600060a0868803121561161857600080fd5b6116218661149a565b94506020860151935060408601519250606086015191506116446080870161149a565b90509295509295909350565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156116d55784516001600160a01b0316835293830193918301916001016116b0565b50506001600160a01b03969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff81118282101715611719576117196117d4565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611748576117486117d4565b604052919050565b60008261176d57634e487b7160e01b600052601260045260246000fd5b500490565b600081600019048311821515161561178c5761178c6117a8565b500290565b6000828210156117a3576117a36117a8565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146112ab57600080fdfea264697066735822122031c3e596a5f951dcc18be52d7af22bb70b51e2526f8dec95529fef9d82d5506664736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "changePrireFeed(address)": {
        "params": {
          "_priceFeed": "New price feed contract address."
        }
      },
      "changeStorage(address)": {
        "params": {
          "_info": "New storage contract address."
        }
      },
      "changeTreasury(address)": {
        "params": {
          "_treasury": "New treasury contract address."
        }
      },
      "fee()": {
        "returns": {
          "_0": "Current call commission."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changePrireFeed(address)": {
        "notice": "Change price feed contract address."
      },
      "changeStorage(address)": {
        "notice": "Change storage contract address."
      },
      "changeTreasury(address)": {
        "notice": "Change treasury contract address."
      },
      "info()": {
        "notice": "Storage contract"
      },
      "priceFeed()": {
        "notice": "Fee token to USD price feed contract"
      },
      "treasury()": {
        "notice": "Treasury contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3691,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "info",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Storage)3326"
      },
      {
        "astId": 3694,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "treasury",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 3698,
        "contract": "contracts/automate/BuyLiquidity.sol:BuyLiquidity",
        "label": "priceFeed",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IPriceFeed)3685"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_contract(IPriceFeed)3685": {
        "encoding": "inplace",
        "label": "contract IPriceFeed",
        "numberOfBytes": "20"
      },
      "t_contract(Storage)3326": {
        "encoding": "inplace",
        "label": "contract Storage",
        "numberOfBytes": "20"
      }
    }
  }
}
